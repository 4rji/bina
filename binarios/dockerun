#!/usr/bin/env bash

# Lista de paquetes a instalar
paquetes=( "docker.io")

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done






# Verificar si el servicio de Docker está activo o inactivo
docker_service_status=$(systemctl is-active docker)

if [[ $docker_service_status == "active" ]]; then
    echo -e "\e[1;32mEl servicio de Docker está activo.\e[0m"
else
    echo -e "\e[1;31mEl servicio de Docker está inactivo. ¿Quieres activarlo? (s para activarlo, enter continuar.)\e[0m"
    read activate_docker

    if [[ $activate_docker == "s" ]]; then
        sudo systemctl start docker
        echo -e "\e[1;32mEl servicio de Docker ha sido activado.\e[0m"
    else
        echo -e "\e[1;31mNo se ha activado el servicio de Docker. Saliendo.\e[0m"
        exit 1
    fi
fi

# Mostrar el menú principal
echo ""
echo -e "\e[1;34m[1] Iniciar contenedor\e[0m"
echo -e "\e[1;34m[2] Guardar\e[0m"
echo -e "\e[1;34m[3] Borrar \e[0m"
echo -e "\e[1;34m[4] Descargar\e[0m"

read choice

if [[ $choice == 1 ]]; then
    # Si elige correr, preguntar por el ImageID
    # Ejecutar el contenedor
    sudo dockerrr
elif [[ $choice == 2 ]]; then
    # Si elige guardar, mostrar la lista de contenedores
    sudo docker ps
    # Preguntar por el Container ID y el nombre de la imagen
    echo -e "\e[1;34mIngresa el Container ID:\e[0m"
    read container_id
    echo -e "\e[1;34mIngresa el nombre de la imagen:\e[0m"
    read image_name
    # Hacer un commit del contenedor
    sudo docker commit $container_id $image_name
elif [[ $choice == 3 ]]; then
    # Si elige borrar, mostrar la lista de imágenes
    sudo docker images
    # Preguntar por el ImageID a borrar
    echo -e "\e[1;34mIngresa el ImageID a borrar:\e[0m"
    echo ""
    read image_id_to_delete
    # Intentar eliminar la imagen forzadamente
    sudo docker rmi -f $image_id_to_delete
    echo ""
    echo ""

    # Preguntar al usuario si quiere ejecutar docker system prune -a
    #echo -e "\e[1;34mIMAGEN ELIMINADA\e[0m"
    echo -e "\n\033[1;32m________________________________________________________________________________________________\033[0m\n"

    echo -e "\e[1;31m¿Quieres eliminar todos los contenedores, redes y imágenes no utilizadas? [y/N]\e[0m"
    read prune_choice

    if [[ $prune_choice == [yY] || $prune_choice == [yY][eE][sS] ]]; then
        sudo docker system prune -a
    fi

    # Mostrar el mensaje independientemente del resultado
    echo -e "\e[1;34mOperacion completada.\e[0m"

    echo " "
    echo ""
    echo -e "\e[1;34mPara eliminar todas las imagenes no utilizadas y no borrar las que corren:\e[0m"
    echo -e "\e[1;34mDebes de correr la imagen que quieres salvar\e[0m"
    echo -e "\e[1;34mdocker system prune -a\e[0m"
    echo ""
    echo -e "\e[1;34mEn caso de error, para purgar TODO (borrar):\e[0m"
    echo -e "\e[1;34mPara eliminar todos los contenedores en ejecución y sin ejecutar:\e[0m"
    echo -e "\e[1;34mdocker rm -f \$(docker ps -aq)\e[0m"
    echo ""
elif [[ $choice == 4 ]]; then
    # Si elige descargar imágenes, mostrar el menú de opciones
    echo -e "\e[1;34m¿Qué imagen deseas descargar?\e[0m"
    echo -e "\e[1;34m1.- docker pull kalilinux/kali-rolling\e[0m"
    echo -e "\e[1;34m2.- docker pull ubuntu\e[0m"
    echo -e "\e[1;34m3.- docker pull debian\e[0m"
    read download_choice

    if [[ $download_choice == 1 ]]; then
        sudo docker pull kalilinux/kali-rolling
    elif [[ $download_choice == 2 ]]; then
        sudo docker pull ubuntu
    elif [[ $download_choice == 3 ]]; then
        sudo docker pull debian
    else
        echo -e "\e[1;31mOpción no válida.\e[0m"
    fi
else
    echo -e "\e[1;31mOpción no válida.\e[0m"
fi

echo ""
echo -e "\e[1;33mMEnsaje\e[0m"
echo -e "\e[1;33m*** Control p and Control q para salir del contenedor sin cerrarlo\e[0m"
