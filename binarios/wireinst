#!/bin/bash


# Lista de paquetes a instalar
paquetes=("wireguard" "resolvconf" )

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done

# Function to handle the setup of the WireGuard connection
setup_wireguard() {
    echo -e "\033[0;34mCopying the configuration file to /etc/wireguard/\033[0m"
    # Copy the configuration file to the WireGuard directory
    sudo cp "$config_file" "/etc/wireguard/$file_name"
    # Adjust configuration file permissions
    sudo chmod 600 "/etc/wireguard/$file_name"

    echo -e "\033[0;35mBringing up the WireGuard connection...\033[0m"
    # Bring up the WireGuard connection
    sudo wg-quick up "$interface_name"

    echo -e "\033[0;36mCurrent status of WireGuard:\033[0m"
    # Display WireGuard status
    sudo wg
    echo ""

    echo "Connecting."
    sleep .5
    echo "Connecting.."
    sleep 1
    echo ""

    echo -e "\033[0;31mYour public IP address is:\033[0m"
    # Display the public IP address
    curl ifconfig.me
    echo ""
}



#!/bin/bash

# Function to handle the setup of the WireGuard connection
setup_wireguard() {
    echo -e "\033[0;34mCopying the configuration file to /etc/wireguard/\033[0m"
    # Copy the configuration file to the WireGuard directory
    sudo cp "$config_file" "/etc/wireguard/$file_name"
    # Adjust configuration file permissions
    sudo chmod 600 "/etc/wireguard/$file_name"

    echo -e "\033[0;35mBringing up the WireGuard connection...\033[0m"
    # Bring up the WireGuard connection
    sudo wg-quick up "$interface_name"

    echo -e "\033[0;36mCurrent status of WireGuard:\033[0m"
    # Display WireGuard status
    sudo wg
    echo ""

    echo "Connecting."
    sleep .5
    echo "Connecting.."
    sleep 1
    echo ""

    echo -e "\033[0;31mYour public IP address is:\033[0m"
    # Display the public IP address
    curl ifconfig.me
    echo ""
}

# Check if -c flag is present or a configuration file is provided
if [ "$1" == "-c" ]; then
    crontab_mode=true
elif [ -z "$1" ]; then
    echo -e "\033[0;31mError: No configuration file provided or -c flag not used."
    echo -e "Usage: $0 [-c | path/to/file.conf]\033[0m"
    exit 1
else
    config_file=$1
    file_name=$(basename "$config_file")
    interface_name="${file_name%.*}"
    setup_wireguard
fi

# Ask the user about adding to crontab
echo -e "\n\033[1;33m_________________________________________________________\033[0m\n"
echo "Do you wish to schedule the WireGuard connection to restart every hour? [Y/n] "
read -r response
response=${response:-Y}

# Check if the response is 'Y' or 'y'
if [[ "$response" =~ ^[Yy]$ ]] || [[ -z "$response" ]]; then
    # Add crontab entry to restart the WireGuard connection every hour
    (crontab -l 2>/dev/null; echo "0 * * * * sudo systemctl restart wg-quick@$interface_name") | crontab -
    echo "The WireGuard connection has been scheduled to restart every hour."
else
    echo "No changes have been made to the crontab."
fi


echo -e "\n\033[1;33m_________________________________________________________\033[0m\n"

echo -e "\033[1;37mADVISORY: This script should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own computers and/or with the computer owner's permission.\033[0m"

echo -e "\n\033[1;33m_________________________________________________________\033[0m\n"

echo ""
crontab -l
echo ""