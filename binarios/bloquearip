#!/usr/bin/env bash




# Lista de paquetes a instalar
paquetes=("ipset" "iptables" "iptables-persistent" "kmod")

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {
    dpkg -l "$1" | grep -q '^ii'
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done






# Función para mostrar mensajes
echo_msg() {
    echo -e "\n=============================================="
    echo -e "\033[1;35m$1\033[0m"
    echo -e "==============================================\n"
}

# Asegurar set exists
ensure_set() {
    sudo ipset list blacklist &>/dev/null || sudo ipset create blacklist hash:ip
}

# Aplicar regla iptables si no existe
ensure_iptables() {
    sudo iptables -C INPUT -m set --match-set blacklist src -j DROP &>/dev/null || \
    sudo iptables -I INPUT -m set --match-set blacklist src -j DROP
}

# Guardar configuración
save_conf() {
    sudo ipset save | sudo tee /etc/ipset.conf > /dev/null
    sudo iptables-save | sudo tee /etc/iptables/rules.v4 > /dev/null
}

# Mostrar uso
display_usage() {
    echo_msg "Uso:"
    echo "  ./script.sh                → Bloquear desde ips.txt si existe"
    echo "  ./script.sh <IP>           → Manejar IP individual"
}

# Bloquear IPs desde ips.txt
block_file() {
    echo_msg "Cargando y bloqueando IPs desde ips.txt"
    sudo ipset flush blacklist
    while read -r ip; do
        sudo ipset add blacklist "$ip"
    done < ips.txt
    ensure_iptables
    echo_msg "Bloqueo de ips.txt aplicado"
}

# Bloquear IP única
block_ip() {
    echo_msg "Bloqueando IP: $1"
    sudo ipset add blacklist "$1"
    ensure_iptables
    echo_msg "IP $1 bloqueada"
}

# Comprobar IP
check_ip() {
    if sudo ipset test blacklist "$1" &>/dev/null; then
        echo_msg "La IP $1 está en el blacklist"
    else
        echo_msg "La IP $1 NO está en el blacklist"
    fi
}

# Eliminar IP
delete_ip() {
    echo_msg "Eliminando IP: $1"
    sudo ipset test blacklist "$1" &>/dev/null && sudo ipset del blacklist "$1"
    echo_msg "IP $1 eliminada si existía"
}

# Inicio
if [[ -z "$1" && ! -f ips.txt ]]; then
    display_usage
    exit 1
fi

ensure_set

# Modo archivo
if [[ -z "$1" && -f ips.txt ]]; then
    read -n1 -p "Se encontró ips.txt. ¿Desea bloquear las IPs? [s/N]: " resp
    echo
    if [[ "$resp" =~ [sS] ]]; then
        block_file
        save_conf
    else
        echo_msg "No se bloquearán las IPs de ips.txt"
    fi
    exit 0
fi

# Modo IP individual
IP="$1"
read -n1 -p "Seleccione acción para IP $IP: (b)loquear, (c)omprobar, (d)esbloquear: " action
echo
case "$action" in
    b|B)
        block_ip "$IP"
        ;;
    c|C)
        check_ip "$IP"
        ;;
    d|D)
        delete_ip "$IP"
        ;;
    *)
        echo_msg "Opción inválida"
        exit 1
        ;;
esac

save_conf
