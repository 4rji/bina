#!/usr/bin/env bash
#clear
echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"
echo -e "\e[34mPerforms ARP and ping scan, shows both scans. To avoid ARP scan, run with -a\e[0m"

echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"

# Lista de paquetes a instalar
paquetes=("arp-scan")

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done







# Function to display available interfaces and IPs
function show_interfaces() {
    ip -4 addr show | awk '/inet/ && !/127.0.0.1/ {split($2, a, "/"); printf "%s:%s\n", $NF, a[1]}'
}

# Check for -a option
auto_arp=false
while getopts "a" opt; do
    case $opt in
        a)
            auto_arp=true
            ;;
        *)
            ;;
    esac
done






# Get the list of interfaces and IPs
interfaces_and_ips=($(show_interfaces))

# Display the list of interfaces
echo -e "Available interfaces and IPs:"
echo ""
for i in "${!interfaces_and_ips[@]}"; do
    interface=$(echo "${interfaces_and_ips[$i]}" | cut -d: -f1)
    ip=$(echo "${interfaces_and_ips[$i]}" | cut -d: -f2)
    echo -e "$((i+1)) - \033[0;31m$interface\033[0m, \033[0;34m$ip\033[0m"
done

if [ "$auto_arp" = false ]; then
    # Perform ARP scan automatically
    echo -e "\n\033[1;32m_________________________________________________________\033[0m\n"
    read -p "$(echo -e '\033[1;33mSelect the interface number for ARP scan: \033[0m')" arp_interface_number
    echo ""
    arp_interface=$(echo "${interfaces_and_ips[$((arp_interface_number-1))]}" | cut -d: -f1)
    
    # Echo the command being executed in green
    echo -e "\033[0;32msudo arp-scan -I $arp_interface --localnet\033[0m"
    
    # Execute the ARP scan, display the output, and save it to arp-scan.txt
#    sudo arp-scan -I "$arp_interface" --localnet | tee arp-scan.txt
     sudo arp-scan -I "$arp_interface" --localnet 

   
    echo ""
    selected_interface_number=$arp_interface_number
else
    # Ask the user to select an interface for network scan
    read -p "Which interface number do you want to scan? " selected_interface_number
fi

# Extract the selected IP
selected_ip=$(echo "${interfaces_and_ips[$((selected_interface_number-1))]}" | cut -d: -f2)
subnet=$(echo "$selected_ip" | awk -F. '{print $1"."$2"."$3}')

echo -e "\n\033[1;34m_________________________________________________________\033[0m\n"

tempfile=$(mktemp) # Create a temporary file






# truncate tempfile
: > "$tempfile"

echo "Scanning ..."
# guardar comando ejecutado
cmd="sudo nmap -sn -n -PR \"$subnet.0/24\" -oG - | awk '/Status: Up/{print \$2}' | sort -V | uniq | tee -a \"$tempfile\" >/dev/null"

# ejecutar comando
eval "$cmd"

echo ""
echo "Done."
echo ""

# mostrar comando ejecutado
echo -e "\033[1;36mCommand executed:\033[0m"
echo "$cmd"
echo ""

echo -e "\033[1;33mScan PING of IP addresses and corresponding host names if available:\033[0m"
echo ""

counter=1
while IFS= read -r ip; do
    host_name=""
    if [ -f ~/.ssh/config ]; then
        host_name=$(grep -B1 "$ip" ~/.ssh/config 2>/dev/null | grep -m1 "Host " | awk '{print $2}')
    fi

    if [[ -n "$host_name" ]]; then
        echo "$counter- $ip - $host_name"
    else
        echo "$counter- $ip - Host name not found"
    fi
    ((counter++))
done < "$tempfile"


echo -e "\n\033[1;34m_________________________________________________________\033[0m\n"







# Ask user if they want to save the found IPs
echo -e '\033[1;33mDo you want to save IPs in sweepIPs file? [N/s]: \033[0m'
read -n 1 save_ips
save_ips=${save_ips:-N}
if [[ "$save_ips" == "s" ]]; then
    cp $tempfile sweepIPs
    echo "IPs saved in sweepIPs."
else
    echo "IPs not saved."
fi
echo -e "\n\033[1;34m_________________________________________________________\033[0m\n"









# Ask for the number to scan
read -p "Which number from the list to scan: " selected_number
echo ""
selected_ip=$(sed "${selected_number}q;d" $tempfile | awk '{print $1}')
read -n1 -p "$(echo -e '\033[1;33mExecute nmap expo to IP? [Y/n]: \033[0m')" execute_expo; execute_expo=${execute_expo:-Y}

if [[ $execute_expo =~ ^[Yy]$ ]]; then
    expo $selected_ip
else
    echo "$(echo -e '\033[1;33mExpo command was not executed.\033[0m')"
fi

# Remove the temporary file
rm $tempfile

echo ""
echo "$(echo -e '\033[1;33m*** Caution: This script is made for /24 ***\033[0m')"
echo ""

# Pregunta al usuario si desea buscar una dirección MAC
read -n1 -p "$(echo -e '\033[1;33mDo you want to search for a MAC address? [Y/n]: \033[0m')" search_mac
echo ""
if [[ $search_mac =~ ^[Yy]$ ]] || [[ -z $search_mac ]]; then
    # Pregunta el nombre para buscar
    read -p "$(echo -e '\033[1;33mEnter the name to search in MAC addresses: \033[0m')" name
    if [[ -n $name ]]; then
        # Construye el comando
        echo ""
        comando="macchanger -l | grep -i $name"
        echo""
        # Muestra el comando
        echo -e "\033[1;32m$comando\033[0m"
        echo""
        # Ejecuta el comando
        eval $comando
    else
        echo -e "\033[1;33mNo name entered. Exiting.\033[0m"
    fi
else
    echo -e "\033[1;33mSearch canceled.\033[0m"
fi
