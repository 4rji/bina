#!/usr/bin/python3
# -*- coding: utf-8 -*-
import sys
import os
import subprocess
import geoip2.database

# Ubicación de la base de datos GeoLite2
DATABASE_LOCATION = '/opt/4rji/GeoLite2-City.mmdb'

# Función para verificar y descargar la base de datos si es necesario
def check_and_download_database():
    if not os.path.exists(DATABASE_LOCATION):
        print(f"La base de datos en {DATABASE_LOCATION} no existe.")
        answer = input("¿Desea descargar la base de datos? (Y/n): ")
        if answer.lower() in ['', 'y']:
            print("Descargando la base de datos...")
            # Reemplaza 'downgeo' con el comando real que utilizas para descargar la base de datos
            result = subprocess.run(['downgeo'], capture_output=True, text=True)
            if result.returncode != 0:
                print(f"Error al descargar la base de datos: {result.stderr}")
                sys.exit(1)
            print("Descarga completada.")
        else:
            print("Operación cancelada.")
            sys.exit(1)

# Función para geolocalizar una IP y retornar la información
def geolocalize_ip(ip, reader):
    try:
        response = reader.city(ip)
        ciudad = response.city.name if response.city.name else "Desconocida"
        region = response.subdivisions.most_specific.name if response.subdivisions.most_specific.name else "Desconocida"
        pais = response.country.name if response.country.name else "Desconocido"
        longitud = response.location.longitude
        latitud = response.location.latitude

        return {
            'ip': ip,
            'ciudad': ciudad,
            'region': region,
            'pais': pais,
            'latitud': latitud,
            'longitud': longitud
        }
    except geoip2.errors.AddressNotFoundError:
        return {
            'ip': ip,
            'ciudad': "No encontrada",
            'region': "No encontrada",
            'pais': "No encontrado",
            'latitud': "N/A",
            'longitud': "N/A"
        }
    except ValueError:
        return {
            'ip': ip,
            'ciudad': "IP inválida",
            'region': "IP inválida",
            'pais': "IP inválida",
            'latitud': "N/A",
            'longitud': "N/A"
        }

# Función principal
def main():
    # Comprueba que se haya proporcionado un archivo como argumento
    if len(sys.argv) != 2:
        print("Uso: ./script.py <archivo_con_IPs>")
        sys.exit(1)

    file_path = sys.argv[1]

    # Verifica que el archivo exista y sea legible
    if not os.path.isfile(file_path):
        print(f"El archivo '{file_path}' no existe o no es un archivo válido.")
        sys.exit(1)

    if not os.access(file_path, os.R_OK):
        print(f"No tienes permisos para leer el archivo '{file_path}'.")
        sys.exit(1)

    # Verificar y descargar la base de datos antes de proceder
    check_and_download_database()

    # Abrir la base de datos GeoLite2
    try:
        reader = geoip2.database.Reader(DATABASE_LOCATION)
    except Exception as e:
        print(f"Error al abrir la base de datos GeoLite2: {e}")
        sys.exit(1)

    # Leer y procesar cada IP en el archivo
    try:
        with open(file_path, 'r') as f:
            ips = f.readlines()
    except Exception as e:
        print(f"Error al leer el archivo '{file_path}': {e}")
        reader.close()
        sys.exit(1)

    # Procesar cada IP
    resultados = []
    for line_number, ip in enumerate(ips, start=1):
        ip = ip.strip()
        if not ip:
            print(f"Línea {line_number}: Vacía, se omite.")
            continue
        resultado = geolocalize_ip(ip, reader)
        resultados.append(resultado)

    reader.close()

    # Imprimir los resultados
    print(f"\nResultados de geolocalización ({len(resultados)} IPs procesadas):\n")
    for res in resultados:
        print(f"IP: {res['ip']}")
        print(f"  País: {res['pais']}")
        print(f"  Región: {res['region']}")
        print(f"  Ciudad: {res['ciudad']}")
        print(f"  Latitud: {res['latitud']}")
        print(f"  Longitud: {res['longitud']}")
        print("-" * 40)

if __name__ == "__main__":
    main()
