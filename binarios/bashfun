#!/usr/bin/env python3
import os

# Texto de la función mejorada extractPorts()
text = r"""function extractPorts(){
    ports="$(cat $1 | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
    ip_address="$(cat $1 | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | sort -u | head -n 1)"
    echo -e "\n[*] Extracting information...\n" > extractPorts.tmp
    echo -e "\t[*] IP Address: $ip_address"  >> extractPorts.tmp
    echo -e "\t[*] Open ports: $ports\n"  >> extractPorts.tmp
    echo $ports | tr -d '\n' | xclip -sel clip
    echo -e "[*] Ports copied to clipboard\n"  >> extractPorts.tmp
    cat extractPorts.tmp; rm extractPorts.tmp
}




function mktem() {
    new_dir=$(mktemp -d)
    echo "Directorio creado en: $new_dir"
    cd "$new_dir" || return
    echo "Cambiado al directorio: $PWD"
}


# fzf improvement
function fzf-lovely(){

        if [ "$1" = "h" ]; then
                fzf -m --reverse --preview-window down:20 --preview '[[ $(file --mime {}) =~ binary ]] &&
                        echo {} is a binary file ||
                         (bat --style=numbers --color=always {} ||
                          highlight -O ansi -l {} ||
                          coderay {} ||
                          rougify {} ||
                          cat {}) 2> /dev/null | head -500'

        else
                fzf -m --preview '[[ $(file --mime {}) =~ binary ]] &&
                                 echo {} is a binary file ||
                                 (bat --style=numbers --color=always {} ||
                                  highlight -O ansi -l {} ||
                                 coderay {} ||
                                  rougify {} ||
                                  cat {}) 2> /dev/null | head -500'
        fi
}


iniciar () {
  local base_dir="/home/ass/Documents/GitHub/4rji/4rjinotes/htb"
  local new_dir="$base_dir/$1"
  local template_file="/home/ass/.template.md"
  local machine_name="$1"
  local new_file="$new_dir/$machine_name.md"

  # Crear directorio y copiar plantilla
  mkdir -p "$new_dir" && cd "$new_dir" && mkdir -p nmap content exploits scripts && cp "$template_file" "$machine_name.md"

  # Mostrar información y variables
  echo "Definir las siguientes variables"
  echo ""
  echo ""
  echo "export htf=$new_file"
  nombre_maquina=$1
  echo "export htcon=$new_dir"
  echo "export ip="

  # Iniciar sesión tmux con la configuración deseada
  tmux new-session -s "$1" -c "cd \"$new_dir\"" -d
  tmux rename-window -t "$1" 0 "Principal"
  tmux split-window -t "$1" -h -c "cd \"$new_dir/nmap\""
  tmux select-pane -t "$1" 1
  tmux split-window -t "$1" -v -c "cd \"$new_dir/content\""
  tmux select-pane -t "$1" 2
  tmux attach -t "$1"

  # Cambiar al directorio "nmap"
  #cd "nmap"

  # Mostrar mensaje final
  echo ""
  pwd
}"""

# Abre el archivo ~/.zshrc en modo de agregado y escribe el texto
with open(os.path.expanduser('~/.zshrc'), 'a') as f:
    f.write('\n\n# Added by Python script\n')  # Añade un comentario para marcar la adición
    f.write(text)

print("[*] Texto añadido a ~/.zshrc")
