#!/usr/bin/env python3
import os

# Texto con todas las funciones para añadir a .zshrc y .bashrc
text = r"""function extractPorts(){
    ports="$(cat $1 | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
    ip_address="$(cat $1 | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | sort -u | head -n 1)"
    echo -e "\n[*] Extracting information...\n" > extractPorts.tmp
    echo -e "\t[*] IP Address: $ip_address"  >> extractPorts.tmp
    echo -e "\t[*] Open ports: $ports\n"  >> extractPorts.tmp
    echo $ports | tr -d '\n' | xclip -sel clip
    echo -e "[*] Ports copied to clipboard\n"  >> extractPorts.tmp
    cat extractPorts.tmp; rm extractPorts.tmp
}

function mktem() {
    if [ -n "$1" ]; then
        new_dir=$(mktemp -d /dev/shm/tmp."$1".XXXXXX)
    else
        new_dir=$(mktemp -d /dev/shm/tmp.XXXXXX)
    fi
    echo "Directorio creado en: $new_dir"
    cd "$new_dir" || return
    echo "Cambiado al directorio: $PWD"
}

function mktemm() {
    if [ -n "$1" ]; then
        new_dir=$(mktemp -d /tmp/tmp."$1".XXXXXX)
    else
        new_dir=$(mktemp -d /tmp/tmp.XXXXXX)
    fi
    echo "Directorio creado en: $new_dir"
    cd "$new_dir" || return
    echo "Cambiado al directorio: $PWD"
}

function __fzf_history_search() {
  local selected
  selected=$(fc -rl 1 | fzf --tac +s --tiebreak=index --toggle-sort=ctrl-r | awk '{$1=""; sub("  ", ""); print}')
  if [[ -n $selected ]]; then
    LBUFFER="$selected"
    RBUFFER=""
  fi
  zle reset-prompt
}

zle -N __fzf_history_search
bindkey '^R' __fzf_history_search

function fzf-lovely(){
    if [ "$1" = "h" ]; then
        fzf -m --reverse --preview-window down:20 --preview '[[ $(file --mime {}) =~ binary ]] &&
                echo {} is a binary file ||
                (bat --style=numbers --color=always {} ||
                 highlight -O ansi -l {} ||
                 coderay {} ||
                 rougify {} ||
                 cat {}) 2> /dev/null | head -500'
    else
        fzf -m --preview '[[ $(file --mime {}) =~ binary ]] &&
                echo {} is a binary file ||
                (bat --style=numbers --color=always {} ||
                 highlight -O ansi -l {} ||
                 coderay {} ||
                 rougify {} ||
                 cat {}) 2> /dev/null | head -500'
    fi
}

function goo() {
    google-chrome-stable "$1" & disown
}

function sshproxy() {
    ssh -D 1080 -C -q -N "$@" &
}

function T() {
    local temp_file=$(mktemp)
    "$@" | tee "$temp_file" | batcat -l rb
}



function htp() {
  pwd=$(pwd)
  foldername=$(basename "$pwd")
  foldername_with_extension="$foldername.md"
  resultado=$("$HOME/.config/bin/bateria.sh")
  ip=$(echo "$resultado" | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
  echo "Definiendo las siguientes variables:"
  echo "export htf=\"$pwd/$foldername_with_extension\""
  echo "export htcon=\"$pwd\""
  echo "export ip=\"$ip\""
}

function rmk(){
        scrub -p dod $1
        shred -zun 10 -v $1
}


#Muestra el ultimo comando con colores con bat 
function coll() {
    # Obtener el último comando del historial excluyendo números de línea y espacios iniciales
    local cmd=$(fc -ln -1 | sed 's/^[[:space:]]*//')

    # Crear un archivo temporal para guardar el comando
    local temp_file=$(mktemp)

    # Escribir el comando en el archivo temporal
    echo $cmd > "$temp_file"

    # Ejecutar el comando y usar 'tee' para duplicar la salida y 'batcat' para visualizarla
    eval $cmd | tee "$temp_file" | batcat -l rb
}


"""

# Función para agregar texto a un archivo
def append_to_file(file_path, text):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'a+') as f:
        f.write('\n\n# Added by Python script\n')
        f.write(text)

# Rutas de los archivos .zshrc y .bashrc
zshrc_path = os.path.expanduser('~/.zshrc')
bashrc_path = os.path.expanduser('~/.bashrc')

# Agregar el texto a ambos archivos
for file_path in [zshrc_path, bashrc_path]:
    append_to_file(file_path, text)

print("[*] Texto añadido a ~/.zshrc y ~/.bashrc")
