#!/usr/bin/env python3
import os

# Texto con todas las funciones para añadir a .zshrc y .bashrc
text = r"""

#######************* INICIO  de BASHFUN   ********************########


#to ignore close with command D
setopt ignoreeof


#alias para neovim chat, para nixos, primero instalar nix-shell -p   neovim y luego clonar   ❯ git clone https://github.com/NvChad/starter ~/.config/nvim
nv() {
  nix-shell -p neovim --run "nvim $1"
}




#Extraer puertos para expo
function extractPorts(){
    ports="$(cat $1 | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
    ip_address="$(cat $1 | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | sort -u | head -n 1)"
    echo -e "\n[*] Extracting information...\n" > extractPorts.tmp
    echo -e "\t[*] IP Address: $ip_address"  >> extractPorts.tmp
    echo -e "\t[*] Open ports: $ports\n"  >> extractPorts.tmp
    echo $ports | tr -d '\n' | xclip -sel clip
    echo -e "[*] Ports copied to clipboard\n"  >> extractPorts.tmp
    cat extractPorts.tmp; rm extractPorts.tmp
}



#crea una carpeta y va a ella
mkdirr() {
    mkdir -p "$1"
    cd "$1" || return
}






#para evitar que se cierre con controld D
setopt ignoreeof


#para abrir una .app en nixos
function abrirapp {
  nix-shell -p appimage-run --run "appimage-run $*"
}





# SSH ping con detalles extendidos
function __fzf_ssh_host_search() {
  local selected host hostname port

  selected=$(
    awk '
      BEGIN { OFS=" - " }
      tolower($1)=="host" {
        if (host != "") { print host, hostname, port, user }
        host=$2; hostname=""; port=""; user=""
      }
      tolower($1)=="hostname" && NF > 1 { hostname=$2 }
      tolower($1)=="port" && NF > 1 { port=$2 }
      tolower($1)=="user" && NF > 1 { user=$2 }
      END { if (host != "") print host, hostname, port, user }
    ' ~/.ssh/config | sort | \
    fzf --tac +s --tiebreak=index --toggle-sort=ctrl-r \
      --preview '
        echo "Detalles del host:";
        echo {};
        echo;

        host=$(echo {} | awk -F " - " "{print \$1}");

        # Extraer hostname correctamente
        hostname=$(awk -v host="$host" '"'"'
          tolower($1) == "host" { in_block = ($2 == host) }
          in_block && tolower($1) == "hostname" { print $2; exit }
        '"'"' ~/.ssh/config);

        # Extraer puerto correctamente
        port=$(awk -v host="$host" '"'"'
          tolower($1) == "host" { in_block = ($2 == host) }
          in_block && tolower($1) == "port" { print $2; exit }
        '"'"' ~/.ssh/config);

        # Si no se encuentra el hostname, usar el mismo host
        if [[ -z "$hostname" ]]; then hostname="$host"; fi

        # Si no se encuentra el puerto, asumir 22
        if [[ -z "$port" ]]; then port=22; fi

        echo "Status:";
        ping -c 1 -W 1 "$hostname" > /dev/null 2>&1 && echo -e "\e[32monline\e[0m" || echo -e "\e[31moffline\e[0m";
        
        echo;
        echo "Status of port $port on $hostname:";

        if nc -zv "$hostname" "$port" 2>&1 | grep -q "succeeded"; then
          echo -e "\e[32mConnection to $hostname port $port succeeded!\e[0m"
        else
          echo -e "\e[31mConnection to $hostname port $port failed!\e[0m"
        fi
      '
  )

  if [[ -n $selected ]]; then
    host=$(echo "$selected" | awk -F ' - ' '{print $1}')
    ssh "$host" < /dev/tty
  fi
}

# En Zsh, registra el widget y asigna la combinación de teclas
zle -N __fzf_ssh_host_search
bindkey '^S' __fzf_ssh_host_search





function mktem() {
    if [ -n "$1" ]; then
        new_dir=$(mktemp -d /dev/shm/tmp."$1".XXXXXX)
    else
        new_dir=$(mktemp -d /dev/shm/tmp.XXXXXX)
    fi
    echo "Directorio creado en: $new_dir"
    cd "$new_dir" || return
    echo "Cambiado al directorio: $PWD"
}

function mktemm() {
    if [ -n "$1" ]; then
        new_dir=$(mktemp -d /tmp/tmp."$1".XXXXXX)
    else
        new_dir=$(mktemp -d /tmp/tmp.XXXXXX)
    fi
    echo "Directorio creado en: $new_dir"
    cd "$new_dir" || return
    echo "Cambiado al directorio: $PWD"
}

function __fzf_history_search() {
  local selected
  selected=$(fc -rl 1 | fzf --tac +s --tiebreak=index --toggle-sort=ctrl-r | awk '{$1=""; sub("  ", ""); print}')
  if [[ -n $selected ]]; then
    LBUFFER="$selected"
    RBUFFER=""
  fi
  zle reset-prompt
}

zle -N __fzf_history_search
bindkey '^R' __fzf_history_search

function fzf-lovely(){
    if [ "$1" = "h" ]; then
        fzf -m --reverse --preview-window down:20 --preview '[[ $(file --mime {}) =~ binary ]] &&
                echo {} is a binary file ||
                (bat --style=numbers --color=always {} ||
                 highlight -O ansi -l {} ||
                 coderay {} ||
                 rougify {} ||
                 cat {}) 2> /dev/null | head -500'
    else
        fzf -m --preview '[[ $(file --mime {}) =~ binary ]] &&
                echo {} is a binary file ||
                (bat --style=numbers --color=always {} ||
                 highlight -O ansi -l {} ||
                 coderay {} ||
                 rougify {} ||
                 cat {}) 2> /dev/null | head -500'
    fi
}

function goo() {
    google-chrome-stable "$1" & disown
}

function sshproxy() {
    ssh -D 1080 -C -q -N "$@" &
}

function T() {
    local temp_file=$(mktemp)
    "$@" | tee "$temp_file" | batcat -l rb
}


nixs() {
  nix-shell -p zsh "$@" --run "zsh -i"
}




function htp() {
  pwd=$(pwd)
  foldername=$(basename "$pwd")
  foldername_with_extension="$foldername.md"
  resultado=$("$HOME/.config/bin/bateria.sh")
  ip=$(echo "$resultado" | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
  echo "Definiendo las siguientes variables:"
  echo "export htf=\"$pwd/$foldername_with_extension\""
  echo "export htcon=\"$pwd\""
  echo "export ip=\"$ip\""
}

function rmk(){
        scrub -p dod $1
        shred -zun 10 -v $1
}

loop() {
    echo "Enter the commands to execute in the loop. Type 'done' to finish."
    
    local commands=()
    
    while true; do
        read "cmd?Command: "
        if [[ "$cmd" == "done" ]]; then
            break
        fi
        commands+=("$cmd")
    done
    
    while true; do
        for cmd in "${commands[@]}"; do
            eval "$cmd"
        done
    done
}

#Muestra el ultimo comando con colores con bat 
function coll() {
    # Obtener el último comando del historial excluyendo números de línea y espacios iniciales
    local cmd=$(fc -ln -1 | sed 's/^[[:space:]]*//')

    # Crear un archivo temporal para guardar el comando
    local temp_file=$(mktemp)

    # Escribir el comando en el archivo temporal
    echo $cmd > "$temp_file"

    # Ejecutar el comando y usar 'tee' para duplicar la salida y 'batcat' para visualizarla
    eval $cmd | tee "$temp_file" | batcat -l rb
}



#funcion cxx para ejecutar archivos 
#function cxx() {
 #   if [ -z "$1" ]; then
  #      echo "Uso: ejecutar_desde_portapapeles <nombre>"
   #     return 1
#    fi

#    local archivo="$1"
 #   local script_dir

#    # Obtener el directorio del script
 #   if [[ -n "${BASH_SOURCE[0]}" ]]; then
  #      script_dir=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
   # else
        # Usar el directorio actual si BASH_SOURCE no está disponible
  #      script_dir=$(pwd)
   # fi

    # Crear el archivo en el directorio actual
#    xclip -selection clipboard -o > "$script_dir/$archivo"
 #   chmod +x "$script_dir/$archivo"

    # Ejecutar el archivo desde el directorio actual
  #  "$script_dir/$archivo"
# }



#limpia el archivo que genera sshmoni para ver las conexiones ssh y tcp de nc
#mas bien limpia ls de lsof, generadas lsof -Pin, sin la n,  muestra dominios
lsofmoni() {
    if [ -z "$1" ]; then
        echo "Usage: archivo <file>"
        return 1
    fi

    if [ ! -f "$1" ]; then
        echo "Error: File '$1' not found."
        return 1
    fi

    awk '/ESTABLISHED/ || /Connection/' "$1" | sort | uniq | grep -vi "other"
}


#######************* INICIO  de ZSHCONFIG   ********************########

# Fix the Java Problem
#export _JAVA_AWT_WM_NONREPARENTING=1

setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e


zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'



bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^[[3~" delete-char
bindkey "^[[1;3C" forward-word
bindkey "^[[1;3D" backward-word



# Load completions
autoload -Uz compinit && compinit

# Keybindings
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward
bindkey '^[w' kill-region

# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
#zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'


# Shell integrations
#eval "$(fzf --zsh)"
#eval "$(zoxide init --cmd cd zsh)"



    

# --- setup fzf theme ---
fg="#CBE0F0"
bg="#011628"
bg_highlight="#143652"
purple="#B388FF"
blue="#06BCE4"
cyan="#2CF9ED"
    

export FZF_DEFAULT_OPTS="
  --height 40% 
  --border 
  --preview-window=right:50% 
  --reverse 
  --info=inline 
  --prompt='> ' 
  --pointer='▶' 
  --marker='✔' 
  --color=fg:#CBE0F0,bg:#011628,hl:#B388FF,fg+:#CBE0F0,bg+:#143652,hl+:#B388FF,info:#06BCE4,prompt:#2CF9ED,pointer:#FF0055"



export FZF_CTRL_T_OPTS="--preview 'bat -n --color=always --line-range :500 {}'"
#para mac solo . no encontre en linux eza
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo $'{}"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview "bat -n --color=always --line-range :500 {}" "$@" ;;
  esac
}




"""

# Función para agregar texto a un archivo
def append_to_file(file_path, text):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'a+') as f:
        f.write('\n\n# Added by Python script\n')
        f.write(text)

# Rutas de los archivos .zshrc y .bashrc
zshrc_path = os.path.expanduser('~/.zshrc')
bashrc_path = os.path.expanduser('~/.bashrc')

# Agregar el texto a ambos archivos
for file_path in [zshrc_path, bashrc_path]:
    append_to_file(file_path, text)

print("[*] Functions and ZSHconfiguration added it to ~/.zshrc y ~/.bashrc")
