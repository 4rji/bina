#!/usr/bin/env bash

# Create a temporary file
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
#echo $'\e[1;32mCreating a temporary file...\e[0m'
tmp_file=$(mktemp)
#echo $'\e[1;33mCommand executed: mktemp\e[0m'
#echo ""

# Capture the process list in the temporary file
#echo $'\e[1;36mCapturing the process list in the temporary file...\e[0m'
#echo $'\e[1;33mCommand executed: ps -eo pid,ppid,tty,stat,time,cmd --forest > '"$tmp_file"$'\e[0m'
ps -eo pid,ppid,tty,stat,time,cmd --forest > "$tmp_file"
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
#read -rp $'\e[1;36m...\e[0m'

# Display the content of the temporary file using batcat
#echo $'\e[1;32mDisplaying the content of the temporary file:\e[0m'
#echo $'\e[1;33mCommand executed: batcat --paging=never -l rb '"$tmp_file"$'\e[0m'
batcat --paging=never -l rb "$tmp_file"
echo ""
#read -rp $'\e[1;36m...\e[0m'

# Remove the temporary file
rm "$tmp_file"

# Display process list (only showing the command, not executing it)
echo $'\e[1;33mps -fae --forest\e[0m'
echo ""
#read -rp $'\e[1;36m...\e[0m'

# Ask the user for the process number
read -p $'\e[1;36mEnter the process number you want to inspect: \e[0m' pid
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""

# Verify if the entered PID is a valid number
if ! [[ "$pid" =~ ^[0-9]+$ ]]; then
    echo $'\e[1;31mError: Please enter a valid process number.\e[0m'
    exit 1
fi

# Check if the directory /proc/<pid> exists
if [ ! -d "/proc/$pid" ]; then
    echo $'\e[1;31mError: Process with PID '"$pid"$' does not exist.\e[0m'
    exit 1
fi

# Display the cwd using sudo
echo $'\e[1;36mWith sudo:\e[0m'
echo $'\e[1;33msudo ls -la /proc/'"$pid"$' | grep cwd\e[0m'
sudo ls -la /proc/"$pid" | grep cwd
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
read -rp $'\e[1;36m...\e[0m'

echo ""
# Display the command line used to start the process
echo $'\e[1;32mDisplaying the command line:\e[0m'
echo ""
echo -e "\e[1;33mcat /proc/${pid}/cmdline | tr '\\0' ' '\e[0m"
sudo cat /proc/"$pid"/cmdline | tr '\0' ' '
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
read -rp $'\e[1;36m...\e[0m'
echo ""

# Display the executable file associated with the process
echo $'\e[1;32mDisplaying the associated executable file:\e[0m'
echo ""
echo $'\e[1;33msudo ls -l /proc/'"$pid"'/exe\e[0m'
sudo ls -l /proc/"$pid"/exe
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
read -rp $'\e[1;36m...\e[0m'
echo ""

# Display the file descriptors opened by the process
echo $'\e[1;32mDisplaying open file descriptors:\e[0m'
echo ""
echo $'\e[1;33msudo ls -l /proc/'"$pid"'/fd\e[0m'
sudo ls -l /proc/"$pid"/fd
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
read -rp $'\e[1;36m...\e[0m'
echo ""

# Display the environment variables of the process
echo $'\e[1;32mDisplaying environment variables:\e[0m'
echo ""
echo $'\e[1;33mcat /proc/'"$pid"'/environ | tr '\''\0'\'' '\''\n'\''\e[0m'
cat /proc/"$pid"/environ | tr '\0' '\n'
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
read -rp $'\e[1;36m...\e[0m'

# Display the process status
echo $'\e[1;32mDisplaying status:\e[0m'
echo ""
echo $'\e[1;33mcat /proc/'"$pid"'/status\e[0m'
cat /proc/"$pid"/status
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""
read -rp $'\e[1;36m...\e[0m'

# Display the network connections of the process
echo $'\e[1;32mDisplaying network connections:\e[0m'
echo ""
echo $'\e[1;33mss -anp | grep '"$pid"$'\e[0m'
ss -anp | grep "$pid"
echo ""
echo $'\e[1;34m_________________________________________________________\e[0m'
echo ""

# Verify if ss found connections for the process
if ! ss -anp | grep -q "$pid"; then
    echo $'\e[1;31mNo network connections found for PID '"$pid"$'.\e[0m'
    echo ""
    echo $'\e[1;34m_________________________________________________________\e[0m'
    echo ""
fi

echo "END"
echo ""

# Ask if the user wants to kill the process
read -p $'\e[1;31mDo you want to kill the process? (s for yes, press enter to continue): \e[0m' response
if [[ "$response" == "s" || "$response" == "S" ]]; then
    sudo kill -9 "$pid"
    echo $'\e[1;32mProcess with PID '"$pid"$' has been terminated.\e[0m'
else
    echo $'\e[1;33mProcess with PID '"$pid"$' was not terminated.\e[0m'
fi