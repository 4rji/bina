#!/usr/bin/env python3


import threading
import time
import re
from http.server import HTTPServer, SimpleHTTPRequestHandler

# Ruta al archivo de registro
log_file_path = '/var/log/image_access.log'

# Ruta al archivo de lista de IPs
ip_list_path = 'ip_list.txt'

# Expresión regular para extraer direcciones IP
ip_regex = re.compile(r'(\d{1,3}\.){3}\d{1,3}')

# Conjunto para almacenar IPs únicas
ip_set = set()

def monitor_log():
    print("Iniciando monitoreo del archivo de registro...")
    with open(log_file_path, 'r') as log_file:
        # Ir al final del archivo
        log_file.seek(0, 2)
        while True:
            line = log_file.readline()
            if not line:
                time.sleep(0.1)
                continue
            # Extraer la IP
            match = ip_regex.search(line)
            if match:
                ip = match.group()
                if ip not in ip_set:
                    ip_set.add(ip)
                    with open(ip_list_path, 'a') as ip_file:
                        ip_file.write(ip + '\n')
                    print(f"Nueva IP agregada: {ip}")

def start_server():
    class CustomHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/':
                self.path = '/ipwebsite.html'
            return super().do_GET()

    PORT = 8000
    with HTTPServer(('', PORT), CustomHandler) as httpd:
        print(f"Sirviendo en el puerto {PORT}")
        httpd.serve_forever()

if __name__ == "__main__":
    # Crear hilos para el monitoreo y el servidor
    monitor_thread = threading.Thread(target=monitor_log, daemon=True)
    server_thread = threading.Thread(target=start_server, daemon=True)

    # Iniciar los hilos
    monitor_thread.start()
    server_thread.start()

    # Mantener el script en ejecución
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Cerrando el servidor y deteniendo el monitoreo.")
