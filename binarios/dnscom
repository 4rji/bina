#!/bin/bash
# Info script â€” prints DNS troubleshooting commands with brief explanations (does NOT execute)


echo ""
echo "_________________________________________________________"
echo ""

# 1) Capture live DNS traffic
echo -e "\033[1;36m  What it does:\033[0m  \033[36mShows any DNS packets on any interface in real time.\033[0m"
echo -e "  \033[1;32msudo tcpdump -ni any port 53\033[0m"

echo ""
echo "_________________________________________________________"
echo ""

# 2) Force a query via systemd-resolved stub with cache-buster
echo -e "\033[1;36m  What it does:\033[0m  \033[36mAsks 127.0.0.53 (systemd-resolved) using a random subdomain to avoid cache.\033[0m"
echo -e "  \033[1;32mdig @127.0.0.53 test\$RANDOM.openai.com\033[0m"

echo ""
echo "_________________________________________________________"
echo ""

# 3) View resolver statistics (hits/misses)
echo -e "\033[1;36m  What it does:\033[0m  \033[36mDisplays recent stats from systemd-resolved: cache hits, misses, timeouts, etc.\033[0m"
echo -e "  \033[1;32mresolvectl statistics | sed -n '1,25p'\033[0m"

echo ""
echo "_________________________________________________________"
echo ""

# 4) Reset resolver statistics (optional)
echo -e "\033[1;36m  What it does:\033[0m  \033[36mResets counters to zero so you can measure fresh activity.\033[0m"
echo -e "  \033[1;32mresolvectl reset-statistics\033[0m"

echo ""
echo "_________________________________________________________"
echo ""

# 5) Flush caches to force fresh lookups
echo -e "\033[1;36m  What it does:\033[0m  \033[36mClears systemd-resolved caches; next queries must go upstream.\033[0m"
echo -e "  \033[1;32mresolvectl flush-caches\033[0m"

echo ""