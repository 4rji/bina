import os
import subprocess
import logging
import re

from flask import Flask, render_template_string, url_for, redirect

app = Flask(__name__)

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)
handler = logging.FileHandler('app.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s:%(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Servidor 1
machines_server1 = [
    {'display_name': 'kali',        'proxmox_id': '100'},
    {'display_name': 'popOS',       'proxmox_id': '101'},
    {'display_name': 'debian',      'proxmox_id': '102'},
    {'display_name': 'tor-relay',   'proxmox_id': '103'},
    {'display_name': 'TrueNAS',     'proxmox_id': '104'},
    {'display_name': 'kali-clean',  'proxmox_id': '105'},
    {'display_name': 'win10',       'proxmox_id': '106'},
    {'display_name': 'win-server',  'proxmox_id': '107'},
    {'display_name': 'splunky',     'proxmox_id': '108'},
]
valid_machines_server1 = [m['proxmox_id'] for m in machines_server1]
PROXMOX_HOST1 = "192.168.44.141"
PROXMOX_USER1 = "root"
PRIVATE_KEY_PATH = "~/.ssh/id_ed25519_prox"

# Servidor 2
machines_server2 = [
    {'display_name': 'sandfly', 'proxmox_id': '748'},
    {'display_name': 'Kali',    'proxmox_id': '777'},
    {'display_name': 'Kasm',    'proxmox_id': '780'},
    {'display_name': 'debian',  'proxmox_id': '790'},
]
valid_machines_server2 = [m['proxmox_id'] for m in machines_server2]
PROXMOX_HOST2 = "192.168.88.171"
PROXMOX_USER2 = "root"

# Servidor 3
machines_server3 = [
    {'display_name': 'PA-VM-11.1.4',        'proxmox_id': '100'},
    {'display_name': 'Palo-Tinto-debian',   'proxmox_id': '101'},
    {'display_name': 'debian-Template',     'proxmox_id': '102'},
    {'display_name': 'Rocky-internal',      'proxmox_id': '103'},
    {'display_name': 'rocky-users',         'proxmox_id': '104'},
    {'display_name': '242-USERS-Debian',    'proxmox_id': '105'},
    {'display_name': 'rocky-public',        'proxmox_id': '106'},
    {'display_name': '241-PUBLIC-debian',   'proxmox_id': '107'},
    {'display_name': '240-INTERNAL-debian', 'proxmox_id': '108'},
    {'display_name': '241-PUBLIC-website-d','proxmox_id': '109'},
    {'display_name': 'E-Comm-Centos7',      'proxmox_id': '110'},
    {'display_name': '2019-Docker',         'proxmox_id': '111'},
    {'display_name': 'Debian-10-DNS',       'proxmox_id': '112'},
    {'display_name': 'Ubuntu-18-web',       'proxmox_id': '113'},
    {'display_name': 'Ubuntu-Wkst',         'proxmox_id': '114'},
]
valid_machines_server3 = [m['proxmox_id'] for m in machines_server3]
PROXMOX_HOST3 = "10.0.4.46"
PROXMOX_USER3 = "root"

# Servidor 4
machines_server4 = [
    {'display_name': 'DEbian', 'proxmox_id': '901'},
    {'display_name': 'Debian', 'proxmox_id': '903'},
    {'display_name': 'Kasm',   'proxmox_id': '910'},
    {'display_name': 'kali',   'proxmox_id': '999'},
]
valid_machines_server4 = [m['proxmox_id'] for m in machines_server4]
PROXMOX_HOST4 = "192.168.99.99"
PROXMOX_USER4 = "root"

def get_vm_status_and_ip(vmid, host, user, key_path):
    try:
        cmd = ["ssh", "-i", key_path, f"{user}@{host}", "qm", "list"]
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode != 0:
            logger.error(f"Error qm list ({host}): {result.stderr.strip()}")
            return ("", "unknown")
        lines = result.stdout.strip().split("\n")
        for line in lines[1:]:
            parts = line.split()
            if len(parts) < 3:
                continue
            if parts[0] == vmid:
                return ("", parts[2])
        return ("", "unknown")
    except Exception as e:
        logger.error(f"ExcepciÃ³n VM {vmid} en {host}: {e}")
        return ("", "error")

@app.route('/')
def index():
    # S1
    info_server1 = []
    for m in machines_server1:
        vmid = m['proxmox_id']
        ip, state = get_vm_status_and_ip(vmid, PROXMOX_HOST1, PROXMOX_USER1, PRIVATE_KEY_PATH)
        info_server1.append({'display_name': m['display_name'],'vmid': vmid,'ip': ip if ip else "On",'power_state': state})

    # S2
    info_server2 = []
    for m in machines_server2:
        vmid = m['proxmox_id']
        ip, state = get_vm_status_and_ip(vmid, PROXMOX_HOST2, PROXMOX_USER2, PRIVATE_KEY_PATH)
        info_server2.append({'display_name': m['display_name'],'vmid': vmid,'ip': ip if ip else "On",'power_state': state})

    # S3
    info_server3 = []
    for m in machines_server3:
        vmid = m['proxmox_id']
        ip, state = get_vm_status_and_ip(vmid, PROXMOX_HOST3, PROXMOX_USER3, PRIVATE_KEY_PATH)
        info_server3.append({'display_name': m['display_name'],'vmid': vmid,'ip': ip if ip else "On",'power_state': state})

    # S4
    info_server4 = []
    for m in machines_server4:
        vmid = m['proxmox_id']
        ip, state = get_vm_status_and_ip(vmid, PROXMOX_HOST4, PROXMOX_USER4, PRIVATE_KEY_PATH)
        info_server4.append({'display_name': m['display_name'],'vmid': vmid,'ip': ip if ip else "On",'power_state': state})

    html_template = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Servidores</title>
        <style>
            body { background-color: #1f1f1f; font-family: Arial, sans-serif; }
            .navbar { background-color: #333; color: white; padding: 1rem; text-align: center; }
            .content { text-align: center; margin-top: 50px; }
            .machine {
                display: inline-block; margin: 20px; padding: 20px; background-color: #FFF;
                border-radius: 10px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
                width: 200px; vertical-align: top;
            }
            .machine-on { background-color: #005f00; }
            .machine-name { font-weight: bold; margin-bottom: 10px; }
            .ip-address { font-size: 0.9em; }
            .ip-active { color: white; }
            .ip-inactive { color: red; }
            button {
                padding: 10px 20px; margin: 5px; font-size: 0.9em; border: none;
                border-radius: 5px; cursor: pointer; color: white;
            }
            .start-button { background-color: #28a745; }
            .shutdown-button { background-color: #dc3545; }
            .stop-button { background-color: #ffc107; }
            button:hover { opacity: 0.8; }
        </style>
    </head>
    <body>
        <div class="navbar"><h1>MEX1</h1></div>
        <div class="content">
            {% for machine in info_server1 %}
            <div class="machine {% if machine.power_state == 'running' %}machine-on{% endif %}">
                <div class="machine-name">{{ machine.display_name }}</div>
                {% if machine.ip == "" %}
                    <div class="ip-address ip-inactive">{{ machine.ip }}</div>
                {% else %}
                    <div class="ip-address ip-active">{{ machine.ip }}</div>
                {% endif %}
                <button class="start-button" onclick="location.href='{{ url_for('start_machine_server1', vmid=machine.vmid) }}'">Turn on</button>
                <button class="shutdown-button" onclick="location.href='{{ url_for('shutdown_machine_server1', vmid=machine.vmid) }}'">Turn off</button>
                <button class="stop-button" onclick="location.href='{{ url_for('stop_machine_server1', vmid=machine.vmid) }}'">Stop</button>
            </div>
            {% endfor %}
        </div>

        <div class="navbar"><h1>CDMX</h1></div>
        <div class="content">
            {% for machine in info_server2 %}
            <div class="machine {% if machine.power_state == 'running' %}machine-on{% endif %}">
                <div class="machine-name">{{ machine.display_name }}</div>
                {% if machine.ip == "" %}
                    <div class="ip-address ip-inactive">{{ machine.ip }}</div>
                {% else %}
                    <div class="ip-address ip-active">{{ machine.ip }}</div>
                {% endif %}
                <button class="start-button" onclick="location.href='{{ url_for('start_machine_server2', vmid=machine.vmid) }}'">Turn on</button>
                <button class="shutdown-button" onclick="location.href='{{ url_for('shutdown_machine_server2', vmid=machine.vmid) }}'">Turn off</button>
                <button class="stop-button" onclick="location.href='{{ url_for('stop_machine_server2', vmid=machine.vmid) }}'">Stop</button>
            </div>
            {% endfor %}
        </div>

        <div class="navbar"><h1>CCDC Server</h1></div>
        <div class="content">
            {% for machine in info_server3 %}
            <div class="machine {% if machine.power_state == 'running' %}machine-on{% endif %}">
                <div class="machine-name">{{ machine.display_name }}</div>
                {% if machine.ip == "" %}
                    <div class="ip-address ip-inactive">{{ machine.ip }}</div>
                {% else %}
                    <div class="ip-address ip-active">{{ machine.ip }}</div>
                {% endif %}
                <button class="start-button" onclick="location.href='{{ url_for('start_machine_server3', vmid=machine.vmid) }}'">Turn on</button>
                <button class="shutdown-button" onclick="location.href='{{ url_for('shutdown_machine_server3', vmid=machine.vmid) }}'">Turn off</button>
                <button class="stop-button" onclick="location.href='{{ url_for('stop_machine_server3', vmid=machine.vmid) }}'">Stop</button>
            </div>
            {% endfor %}
        </div>

        <div class="navbar"><h1>MSP</h1></div>
        <div class="content">
            {% for machine in info_server4 %}
            <div class="machine {% if machine.power_state == 'running' %}machine-on{% endif %}">
                <div class="machine-name">{{ machine.display_name }}</div>
                {% if machine.ip == "" %}
                    <div class="ip-address ip-inactive">{{ machine.ip }}</div>
                {% else %}
                    <div class="ip-address ip-active">{{ machine.ip }}</div>
                {% endif %}
                <button class="start-button" onclick="location.href='{{ url_for('start_machine_server4', vmid=machine.vmid) }}'">Turn on</button>
                <button class="shutdown-button" onclick="location.href='{{ url_for('shutdown_machine_server4', vmid=machine.vmid) }}'">Turn off</button>
                <button class="stop-button" onclick="location.href='{{ url_for('stop_machine_server4', vmid=machine.vmid) }}'">Stop</button>
            </div>
            {% endfor %}
        </div>
    </body>
    </html>
    """
    return render_template_string(
        html_template,
        info_server1=info_server1,
        info_server2=info_server2,
        info_server3=info_server3,
        info_server4=info_server4
    )

# Rutas S1
@app.route('/server1/start/<vmid>')
def start_machine_server1(vmid):
    if vmid in valid_machines_server1:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER1}@{PROXMOX_HOST1}", "qm", "start", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error start VM {vmid} S1: {e}")
    return redirect('/')

@app.route('/server1/shutdown/<vmid>')
def shutdown_machine_server1(vmid):
    if vmid in valid_machines_server1:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER1}@{PROXMOX_HOST1}", "qm", "shutdown", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error shutdown VM {vmid} S1: {e}")
    return redirect('/')

@app.route('/server1/stop/<vmid>')
def stop_machine_server1(vmid):
    if vmid in valid_machines_server1:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER1}@{PROXMOX_HOST1}", "qm", "stop", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error stop VM {vmid} S1: {e}")
    return redirect('/')

# Rutas S2
@app.route('/server2/start/<vmid>')
def start_machine_server2(vmid):
    if vmid in valid_machines_server2:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER2}@{PROXMOX_HOST2}", "qm", "start", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error start VM {vmid} S2: {e}")
    return redirect('/')

@app.route('/server2/shutdown/<vmid>')
def shutdown_machine_server2(vmid):
    if vmid in valid_machines_server2:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER2}@{PROXMOX_HOST2}", "qm", "shutdown", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error shutdown VM {vmid} S2: {e}")
    return redirect('/')

@app.route('/server2/stop/<vmid>')
def stop_machine_server2(vmid):
    if vmid in valid_machines_server2:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER2}@{PROXMOX_HOST2}", "qm", "stop", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error stop VM {vmid} S2: {e}")
    return redirect('/')

# Rutas S3
@app.route('/server3/start/<vmid>')
def start_machine_server3(vmid):
    if vmid in valid_machines_server3:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER3}@{PROXMOX_HOST3}", "qm", "start", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error start VM {vmid} S3: {e}")
    return redirect('/')

@app.route('/server3/shutdown/<vmid>')
def shutdown_machine_server3(vmid):
    if vmid in valid_machines_server3:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER3}@{PROXMOX_HOST3}", "qm", "shutdown", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error shutdown VM {vmid} S3: {e}")
    return redirect('/')

@app.route('/server3/stop/<vmid>')
def stop_machine_server3(vmid):
    if vmid in valid_machines_server3:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER3}@{PROXMOX_HOST3}", "qm", "stop", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error stop VM {vmid} S3: {e}")
    return redirect('/')

# Rutas S4
@app.route('/server4/start/<vmid>')
def start_machine_server4(vmid):
    if vmid in valid_machines_server4:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER4}@{PROXMOX_HOST4}", "qm", "start", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error start VM {vmid} S4: {e}")
    return redirect('/')

@app.route('/server4/shutdown/<vmid>')
def shutdown_machine_server4(vmid):
    if vmid in valid_machines_server4:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER4}@{PROXMOX_HOST4}", "qm", "shutdown", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error shutdown VM {vmid} S4: {e}")
    return redirect('/')

@app.route('/server4/stop/<vmid>')
def stop_machine_server4(vmid):
    if vmid in valid_machines_server4:
        cmd = ["ssh", "-i", PRIVATE_KEY_PATH, f"{PROXMOX_USER4}@{PROXMOX_HOST4}", "qm", "stop", vmid]
        try: subprocess.Popen(cmd)
        except Exception as e: logger.error(f"Error stop VM {vmid} S4: {e}")
    return redirect('/')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=600, debug=True)
