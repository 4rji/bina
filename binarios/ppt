#!/bin/bash

# Lista de paquetes a instalar
paquetes=("lsof" "net-tools" "nmap" "procps" )

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {  
    dpkg -l "$1" | grep -q '^ii' >/dev/null
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" >/dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" > /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" > /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete" >/dev/null
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete" >/dev/null
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete" >/dev/null
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete" >/dev/null
            fi
            ;;
        *)
            ;;
    esac
done

# Función para preguntar y ejecutar lsof
preguntar_y_ejecutar_lsof() {
    echo ""
    echo "_________________________________________________________"
    echo ""
    echo -e "\033[34mComando a ejecutar: sudo lsof -i -P -n  (also ss -lntp)\033[0m"
    read -n1 -p $'\033[33m¿Ejecutar lsof? [Enter/c]: \033[0m' respuesta
    if [[ $respuesta != "c" ]]; then
        sudo lsof -i -P -n
    fi
}

# Función para preguntar y ejecutar netstat
preguntar_y_ejecutar_netstat() {
    echo ""
    echo "_________________________________________________________"
    echo ""
    echo -e "\033[34mComando a ejecutar: netstat -tulpn\033[0m"
    read -n1 -p $'\033[33m¿Ejecutar netstat? [Enter/c]: \033[0m' respuesta
    if [[ $respuesta != "c" ]]; then
        netstat -tulpn
    fi
}

# Función para preguntar y ejecutar nmap en localhost
preguntar_y_ejecutar_nmap() {
    echo ""
    echo "_________________________________________________________"
    echo ""
    echo -e "\033[34mComando a ejecutar: sudo nmap -T4 -p- --min-rate 1000 localhost\033[0m"
    echo "con -f para enviar paquetes pequenos y evitar Detection"
    read -n1 -p $'\033[33m¿Ejecutar nmap -T4 -p- --min-rate 1000 -D RND:20 localhost? [Enter/c]: \033[0m' respuesta
    if [[ $respuesta != "c" ]]; then
        sudo nmap -T4 -p- --min-rate 1000 -D RND:20 localhost
    fi
}

# Función para preguntar y ejecutar ps
preguntar_y_ejecutar_ps() {
    echo ""
    echo "_________________________________________________________"
    echo ""
    echo -e "\033[34mComando a ejecutar: ❯ ps -fae --forest \033[0m"
    read -n1 -p $'\033[33m¿Ejecutar procesos? [Enter/c]: \033[0m' respuesta
    if [[ $respuesta != "c" ]]; then
        ps -fae --forest 
	#ps -eo user,comm,pid
    fi
}

# Llamadas a las funciones
preguntar_y_ejecutar_lsof
preguntar_y_ejecutar_netstat
preguntar_y_ejecutar_nmap
preguntar_y_ejecutar_ps
