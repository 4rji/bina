from flask import Flask, render_template_string, url_for, redirect
import subprocess
import logging

app = Flask(__name__)

# Configurar el logging para capturar errores sin interferir con Flask
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)
handler = logging.FileHandler('app.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s:%(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Definir la lista de máquinas virtuales con su nombre para mostrar y su nombre en virsh
machines = [
    {'display_name': 'Windows 10', 'virsh_name': 'windows10'},
    {'display_name': '2016 Docker/Remote', 'virsh_name': 'docker_remote'},
    {'display_name': 'Debian 10 DNS/NTP', 'virsh_name': 'debian_dns_ntp'},
    {'display_name': 'Ubuntu 18 Web', 'virsh_name': 'ubuntu_web'},
    {'display_name': '2019 AD/DNS/DHCP', 'virsh_name': 'ad_dns_dhcp'},
    {'display_name': 'Ubuntu Workstation', 'virsh_name': 'ubuntu_wkst'},
    {'display_name': 'Splunk 9.1.1', 'virsh_name': 'splunk'},
    {'display_name': 'CentOS 7 E-comm', 'virsh_name': 'centos7.0-2'},
    {'display_name': 'Fedora 21 Webmail/WebApps', 'virsh_name': 'fedora_webmail'},
]

def get_vm_status_and_ip(vm_name):
    try:
        # Obtener el estado de la VM usando 'virsh domstate'
        result_state = subprocess.run(
            ['sudo', 'virsh', 'domstate', vm_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        state = result_state.stdout.strip().lower()

        if state != 'running':
            return "No-Active"

        # Obtener la dirección IP usando 'virsh domifaddr'
        result_ip = subprocess.run(
            ['sudo', 'virsh', 'domifaddr', vm_name, '--source', 'agent'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        if result_ip.returncode != 0:
            # No se pudo obtener la IP, posiblemente el Guest Agent no está activo
            logger.error(f"Error obteniendo IP para {vm_name}: {result_ip.stderr.strip()}")
            return "No-Active"

        lines = result_ip.stdout.strip().split('\n')

        # Ignorar la primera línea (cabecera)
        for line in lines[2:]:
            if 'ipv4' in line:
                parts = line.split()
                if len(parts) >= 4:
                    ip = parts[3].split('/')[0]
                    if ip != "127.0.0.1":
                        return ip

        # Si no se encontró una IP válida
        return "No-Active"

    except Exception as e:
        # Registrar el error en el log
        logger.error(f"Excepción al obtener IP para {vm_name}: {e}")
        return "Error"

@app.route('/')
def index():
    machine_info = []
    for machine in machines:
        display_name = machine['display_name']
        virsh_name = machine['virsh_name']
        ip = get_vm_status_and_ip(virsh_name)
        machine_info.append({
            'display_name': display_name,
            'virsh_name': virsh_name,
            'ip': ip
        })
    
    # HTML template con iteración sobre machine_info
    html_template = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Network Dashboard</title>
        <style>
            body {
                background-color: #007BFF;
                font-family: Arial, sans-serif;
            }
            .navbar {
                background-color: #333;
                color: white;
                padding: 1rem;
                text-align: center;
            }
            .content {
                text-align: center;
                margin-top: 50px;
            }
            .machine {
                display: inline-block;
                margin: 20px;
                padding: 20px;
                background-color: #FFF;
                border-radius: 10px;
                box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
                width: 200px;
                vertical-align: top;
            }
            .machine a {
                color: #007BFF;
                text-decoration: none;
                font-weight: bold;
                display: block;
                margin-bottom: 10px;
            }
            .machine a:hover {
                color: #0056b3;
            }
            .ip-address {
                font-size: 0.9em;
            }
            .ip-active {
                color: red;
            }
            .ip-inactive {
                color: green;
            }
            .image-container {
                text-align: center;
                margin-top: 20px;
            }
            .image-container img {
                max-width: 100%;
                height: auto;
                border-radius: 8px;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
            }
            .instruction {
                color: #90EE90;
                font-size: 2.2em;
                text-align: center;
                margin-bottom: 10px;
            }
        </style>
    </head>
    <body>
        <div class="navbar">
            <h1>2024 State CCDC - Virtual Machines</h1>
        </div>
    
        <div class="content">
            {% for machine in machine_info %}
            <div class="machine">
                <a href="{{ url_for('start_machine', machine=machine.virsh_name) }}">{{ machine.display_name }}</a>
                {% if machine.ip == "No-Active" %}
                    <div class="ip-address ip-inactive">{{ machine.ip }}</div>
                {% elif machine.ip == "Error" %}
                    <div class="ip-address ip-inactive">Error</div>
                {% else %}
                    <div class="ip-address ip-active">{{ machine.ip }}</div>
                {% endif %}
            </div>
            {% endfor %}
            <div class="image-container">
                <img src="{{ url_for('static', filename='ccdc.png') }}" alt="CCDC Logo">
            </div>
        </div>
        <p class="instruction">"Click the machine name to start it."</p>
    </body>
    </html>
    """
    return render_template_string(html_template, machine_info=machine_info)

@app.route('/start/<machine>')
def start_machine(machine):
    # Mapear nombres de máquina a comandos específicos
    machine_commands = {
        'windows10': 'virsh start windows10',
        'docker_remote': 'virsh start docker_remote',
        'debian_dns_ntp': 'virsh start debian_dns_ntp',
        'ubuntu_web': 'virsh start ubuntu_web',
        'ad_dns_dhcp': 'virsh start ad_dns_dhcp',
        'ubuntu_wkst': 'virsh start ubuntu_wkst',
        'splunk': 'virsh start splunk',
        'centos7.0-2': 'sudo virsh start centos7.0-2',
        'fedora_webmail': 'virsh start fedora_webmail',
    }

    if machine in machine_commands:
        command = machine_commands[machine]
        try:
            # Ejecutar el comando de forma segura
            subprocess.Popen(command, shell=True)
        except Exception as e:
            # Registrar el error en el log
            logger.error(f"Error iniciando {machine}: {e}")

    # Redirigir de vuelta a la página principal sin mostrar ningún mensaje
    return redirect('/')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=600, debug=True)
