#!/usr/bin/env bash

# Función para verificar si un paquete está instalado
paquete_instalado() {  
    dpkg -l "$1" | grep -q '^ii'  
}

# Instalar paquetes necesarios
paquetes=("net-tools")
for paquete in "${paquetes[@]}"; do 
    if ! paquete_instalado "$paquete"; then  
        sudo apt-get install -y "$paquete"  
    fi  
done

# SSH Port y PID File
SSH_PORT=22
PID_FILE="/tmp/pidssh"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
SEPARATOR='-----------------------------------------------------------------------------'

# Función para verificar las conexiones SSH
check_ssh_connections() {
    > "$PID_FILE"
    local connections=$(sudo netstat -tnp | grep ':'"$SSH_PORT" | grep 'ESTABLISHED')
    if [ ! -z "$connections" ]; then
        echo ""
        echo -e "${RED}${SEPARATOR}${NC}"
        echo -e "${RED}       ALERTA: Conexión activa de SSH detectada.      ${NC}"
        echo -e "${RED}${SEPARATOR}${NC}"
        echo ""
        local count=1
        echo "$connections" | while IFS= read -r line; do
            local ip=$(echo "$line" | awk '{print $5}' | cut -d':' -f1)
            local pid=$(echo "$line" | awk '{print $7}' | grep -o '[0-9]*')
            local user=$(sudo ps -o user= -p "$pid" 2>/dev/null)
            echo -e "${YELLOW}$count) Usuario SSH: $user, IP: $ip, PID: $pid, Conexión: $user@$ip${NC}"
            echo "$pid" >> "$PID_FILE"
            ((count++))
        done
        echo -e "${RED}${SEPARATOR}${NC}"
        ask_to_kill_connection
    else
        echo ""
        echo -e "${GREEN}No hay conexiones SSH activas en este momento.${NC}"
        echo ""
        exit_after_delay
    fi
}

# Función para preguntar al usuario si desea terminar una conexión
ask_to_kill_connection() {
    echo ""
    echo ""
    echo ""
    echo -e "Selecciona numero o [s] para terminar TODAS "
    echo ""
    read -n 1 -t 4 -p ">  " selection
    echo ""

    if [ -z "$selection" ]; then
        echo ""

        echo -e "${BLUE}Escanenado de nuevo...${NC}"
        echo ""
        exit 0
    elif [ "$selection" = "A" ] || [ "$selection" = "a" ]; then
        kill_all_connections
    elif [[ "$selection" =~ ^[0-9]+$ ]]; then
        handle_connection_selection "$selection"
    elif [ "$selection" = "S" ] || [ "$selection" = "s" ]; then
        kill_all_connections
    else
        echo -e "${RED}Selección inválida. Saliendo...${NC}"
        echo ""
        exit 1
    fi
}

# Función para manejar la selección del usuario
handle_connection_selection() {
    local selection=$1
    mapfile -t pids < "$PID_FILE"

    if [ "$selection" -gt 0 ] && [ "$selection" -le ${#pids[@]} ]; then
        local selected_pid=${pids[$selection-1]}
        sudo kill "$selected_pid"
        echo -e "${GREEN}Se ha ejecutado 'sudo kill' en el PID $selected_pid.${NC}"
    else
        echo -e "${RED}Selección inválida.${NC}"
    fi
}

# Función para terminar todas las conexiones
kill_all_connections() {
    echo "Terminando todas las conexiones SSH..."
    while read -r pid; do
        sudo kill "$pid"
        echo "Conexión terminada para PID $pid."
    done < "$PID_FILE"
}

# Función para salir del script después de un retraso
exit_after_delay() {
    echo "    --- Comprobando nuevamente en 4 segundos...    --- "
    echo ""
    echo ""
    echo ""
    echo ""
    sleep 3
    exit 0
}

# Llamar a la función de comprobación una vez
check_ssh_connections
