#!/usr/bin/env bash

# Function to check if a package is installed
package_installed() {
    dpkg -l "$1" | grep -q '^ii'
}

# Install required packages
packages=("net-tools")
for package in "${packages[@]}"; do
    if ! package_installed "$package"; then
        sudo apt-get install -y "$package"
    fi
done

# SSH Port and PID File
SSH_PORT=22
PID_FILE="/tmp/pidssh"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
SEPARATOR='-----------------------------------------------------------------------------'

# Function to check SSH connections
check_ssh_connections() {
    > "$PID_FILE"
    local connections
    connections=$(sudo netstat -tnp | grep ":$SSH_PORT" | grep 'ESTABLISHED')
    if [ -n "$connections" ]; then
        echo ""
        echo -e "${RED}${SEPARATOR}${NC}"
        echo -e "${RED}       ALERT: Active SSH connection detected.      ${NC}"
        echo -e "${RED}${SEPARATOR}${NC}"
        echo ""
        local count=1
        echo "$connections" | while IFS= read -r line; do
            local ip
            ip=$(echo "$line" | awk '{print $5}' | cut -d':' -f1)
            local pid
            pid=$(echo "$line" | awk '{print $7}' | grep -o '[0-9]*')
            local user
            user=$(sudo ps -o user= -p "$pid" 2>/dev/null)
            echo -e "${YELLOW}$count) SSH User: $user, IP: $ip, PID: $pid, Connection: $user@$ip${NC}"
            echo "$pid" >> "$PID_FILE"
            ((count++))
        done
        echo -e "${RED}${SEPARATOR}${NC}"
    else
        echo ""
        echo -e "${GREEN}No active SSH connections detected at this time.${NC}"
        echo ""
    fi
}

# Function to check other ESTABLISHED connections
check_other_connections() {
    echo ""
    local other
    other=$(sudo netstat -tnp | grep 'ESTABLISHED' | grep -v ":$SSH_PORT")
    if [ -n "$other" ]; then
        echo -e "${BLUE}${SEPARATOR}${NC}"
        echo -e "${BLUE}    Other ESTABLISHED connections detected:    ${NC}"
        echo -e "${BLUE}${SEPARATOR}${NC}"
        echo "$other"
        echo -e "${BLUE}${SEPARATOR}${NC}"
    else
        echo -e "${GREEN}No other ESTABLISHED connections.${NC}"
    fi
}

# Function to ask the user if they want to terminate a connection
ask_to_kill_connection() {
    echo ""
    echo -e "Select a number or [s] to terminate ALL"
    read -n 1 -t 4 -p ">  " selection
    echo ""
    if [ -z "$selection" ]; then
        echo ""
        echo -e "${BLUE}Rescanning...${NC}"
    elif [[ "$selection" =~ ^[0-9]+$ ]]; then
        handle_connection_selection "$selection"
    elif [[ "$selection" =~ ^[sS]$|^[aA]$ ]]; then
        kill_all_connections
    else
        echo -e "${RED}Invalid selection. Exiting...${NC}"
        exit 1
    fi
}

# Function to handle user's selection
handle_connection_selection() {
    local selection=$1
    mapfile -t pids < "$PID_FILE"

    if [ "$selection" -gt 0 ] && [ "$selection" -le "${#pids[@]}" ]; then
        local selected_pid=${pids[$selection-1]}
        sudo kill "$selected_pid"
        echo -e "${GREEN}Executed 'sudo kill' on PID $selected_pid.${NC}"
    else
        echo -e "${RED}Invalid selection.${NC}"
    fi
}

# Function to terminate all SSH connections
kill_all_connections() {
    echo "Terminating all SSH connections..."
    while read -r pid; do
        sudo kill "$pid"
        echo "Terminated connection for PID $pid."
    done < "$PID_FILE"
}

# Function to exit the script after a delay
exit_after_delay() {
    echo "    --- Checking again in 4 seconds...    --- "
    sleep 3
    exit 0
}

# Execute connection checks
check_ssh_connections
check_other_connections

# At the end, prompt the user to terminate connections if any SSH connections exist
if [ -s "$PID_FILE" ]; then
    ask_to_kill_connection
fi

exit_after_delay