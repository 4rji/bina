<script>
    // Función para ejecutar comandos (deploy y reset)
    async function executeCommand(event, commandName, filename = null) {
        event.preventDefault(); // Evita el envío del formulario
        let payload = { command: commandName };
        if (filename !== null) {
            payload.filename = filename;
        }
        const response = await fetch("/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (response.ok) {
            const alertBox = document.createElement('div');
            alertBox.textContent = result.message;
            alertBox.style.position = 'fixed';
            alertBox.style.bottom = '20px';
            alertBox.style.left = '50%';
            alertBox.style.transform = 'translateX(-50%)';
            alertBox.style.backgroundColor = '#4CAF50';
            alertBox.style.color = 'white';
            alertBox.style.padding = '15px';
            alertBox.style.borderRadius = '5px';
            document.body.appendChild(alertBox);
            setTimeout(() => {
                alertBox.remove();
            }, 5000); // Auto-cerrar después de 5 segundos
            // No es necesario refrescar la página manualmente; el estado se actualizará automáticamente
        } else {
            alert("Error: " + result.error);
        }
    }

    // Función para actualizar los estados de las máquinas cada 5 segundos
    async function updateStatuses() {
        try {
            const response = await fetch('/status');
            const data = await response.json();
            data.files.forEach(file => {
                const statusCircle = document.getElementById('status-' + file.filename.replace('.tar', ''));
                if (statusCircle) {
                    if (file.status === 'running') {
                        statusCircle.classList.add('status-running');
                        statusCircle.classList.remove('status-stopped');
                    } else {
                        statusCircle.classList.add('status-stopped');
                        statusCircle.classList.remove('status-running');
                    }
                }
            });
        } catch (error) {
            console.error('Error actualizando los estados:', error);
        }
    }

    // Llamar a updateStatuses cada 5 segundos
    setInterval(updateStatuses, 5000);

    // Llamada inicial para actualizar los estados al cargar la página
    window.onload = updateStatuses;
</script>
