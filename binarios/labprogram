from flask import Flask, render_template_string, request, jsonify
import subprocess
import os
import logging

app = Flask(__name__)

# Configure logging to help with debugging
logging.basicConfig(level=logging.INFO)

# Lista de archivos con sus descripciones
files = [
    {"icon": "", "filename": "aguademayo.tar", "description": "Deploys the aguademayo.tar Docker machine with SSH access."},
    {"icon": "", "filename": "amor.tar", "description": "Deploys the amor.tar Docker machine with SSH access."},
    {"icon": "", "filename": "anonymouspingu.tar", "description": "Deploys the anonymouspingu.tar Docker machine with SSH access."},
    {"icon": "", "filename": "asucar.tar", "description": "Deploys the asucar.tar Docker machine with SSH access."},
    {"icon": "", "filename": "bashpariencias.tar", "description": "Deploys the bashpariencias.tar Docker machine with SSH access."},
    {"icon": "", "filename": "borazuwarahctf.tar", "description": "Deploys the borazuwarahctf.tar Docker machine with SSH access."},
    {"icon": "", "filename": "breakmyssh.tar", "description": "Deploys the breakmyssh.tar Docker machine with SSH access."},
    {"icon": "", "filename": "buscalove.tar", "description": "Deploys the buscalove.tar Docker machine with SSH access."},
    {"icon": "", "filename": "cachopo.tar", "description": "Deploys the cachopo.tar Docker machine with SSH access."},
    {"icon": "", "filename": "chocolatefire.tar", "description": "Deploys the chocolatefire.tar Docker machine with SSH access."},
    {"icon": "", "filename": "chocolatelovers.tar", "description": "Deploys the chocolatelovers.tar Docker machine with SSH access."},
    {"icon": "", "filename": "collections.tar", "description": "Deploys the collections.tar Docker machine with SSH access."},
    {"icon": "", "filename": "consolelog.tar", "description": "Deploys the consolelog.tar Docker machine with SSH access."},
    {"icon": "", "filename": "dark1.tar", "description": "Deploys the dark1.tar Docker machine with SSH access."},
    {"icon": "", "filename": "dark2.tar", "description": "Deploys the dark2.tar Docker machine with SSH access."},
    {"icon": "", "filename": "database.tar", "description": "Deploys the database.tar Docker machine with SSH access."},
    {"icon": "", "filename": "debugme.tar", "description": "Deploys the debugme.tar Docker machine with SSH access."},
    {"icon": "", "filename": "dockerlabs.tar", "description": "Deploys the dockerlabs.tar Docker machine with SSH access."},
    {"icon": "", "filename": "dockhacklab.tar", "description": "Deploys the dockhacklab.tar Docker machine with SSH access."},
    {"icon": "", "filename": "domain.tar", "description": "Deploys the domain.tar Docker machine with SSH access."},
    {"icon": "", "filename": "inclusion.tar", "description": "Deploys the inclusion.tar Docker machine with SSH access."},
    {"icon": "", "filename": "injection.tar", "description": "Deploys the injection.tar Docker machine with SSH access."},
    {"icon": "", "filename": "move.tar", "description": "Deploys the move.tar Docker machine with SSH access."},
    {"icon": "", "filename": "trust.tar", "description": "Deploys the trust.tar Docker machine with SSH access."},
    {"icon": "", "filename": "upload.tar", "description": "Deploys the upload.tar Docker machine with SSH access."},
    {"icon": "", "filename": "whereismywebshell.tar", "description": "Deploys the whereismywebshell.tar Docker machine with SSH access."}
]

# HTML template con UI mejorada y alertas que se cierran automáticamente después de 5 segundos
html = '''
<!doctype html>
<html>
<head>
    <title>Hacking Labs by Havi</title>
    <style>
        body {
            background-color: #4169E1; /* Royal Blue */
            font-family: Arial, sans-serif;
            color: white;
            margin: 0;
            padding: 0;
        }
        /* Navigation Bar */
        .navbar {
            overflow: hidden;
            background-color: #333;
            padding: 14px 20px;
        }
        .navbar h1 {
            float: left;
            color: white;
            margin: 0;
            font-size: 24px;
        }
        /* Main Container with Flex Layout */
        .main-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        /* Button Row */
        .button-row {
            display: flex;
            align-items: center;
            margin: 10px 0;
            width: 80%;
            max-width: 800px;
            background-color: rgba(255, 255, 255, 0.2);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
        }
        /* Buttons */
        .command-button {
            background-color: #4CAF50; /* Green */
            border: none;
            color: white;
            padding: 15px 40px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin-right: 20px;
            cursor: pointer;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
            transition: transform 0.2s, box-shadow 0.2s;
            flex-shrink: 0;
            width: 250px;
        }
        .command-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.4);
        }
        /* Description */
        .description {
            flex: 1;
            font-size: 16px;
            background-color: rgba(255, 255, 255, 0.1);
            padding: 10px 15px;
            border-radius: 5px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
        }
    </style>
    <script>
        async function executeCommand(event, commandName, filename = null) {
            event.preventDefault(); // Prevent the default form submission
            let payload = { command: commandName };
            if (filename !== null) {
                payload.filename = filename;
            }
            const response = await fetch("/", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(payload)
            });
            const result = await response.json();
            if (response.ok) {
                const alertBox = document.createElement('div');
                alertBox.textContent = result.message;
                alertBox.style.position = 'fixed';
                alertBox.style.bottom = '20px';
                alertBox.style.left = '50%';
                alertBox.style.transform = 'translateX(-50%)';
                alertBox.style.backgroundColor = '#4CAF50';
                alertBox.style.color = 'white';
                alertBox.style.padding = '15px';
                alertBox.style.borderRadius = '5px';
                document.body.appendChild(alertBox);
                setTimeout(() => {
                    alertBox.remove();
                }, 5000); // Auto-close after 5 segundos
            } else {
                alert("Error: " + result.error);
            }
        }
    </script>
</head>
<body>
    <!-- Navigation Bar -->
    <div class="navbar">
        <h1>Hacking Labs by Havi</h1>
    </div>
    
    <!-- Main Container -->
    <div class="main-container">
        <!-- Botones para desplegar archivos -->
        {% for file in files %}
        <div class="button-row">
            <form onsubmit="executeCommand(event, 'deploy', '{{ file.filename }}')">
                <button type="submit" class="command-button">{{ file.icon }} {{ file.filename }}</button>
            </form>
            <div class="description">
                {{ file.description }}
            </div>
        </div>
        {% endfor %}
        
        <!-- Botón para resetear todas las máquinas -->
        <div class="button-row">
            <form onsubmit="executeCommand(event, 'reset_all_machines')">
                <button type="submit" class="command-button">Reset All Machines</button>
            </form>
            <div class="description">
                Removes all running Docker containers, resetting the environment.
            </div>
        </div>
    </div>
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        data = request.get_json()
        cmd = data.get('command')
        filename = data.get('filename')  # Nuevo campo para el nombre del archivo
        logging.info(f"Received command: {cmd}, filename: {filename}")
        if cmd == 'deploy' and filename:
            try:
                # Validar el nombre del archivo para evitar inyección de comandos
                allowed_files = [file['filename'] for file in files]
                if filename not in allowed_files:
                    logging.warning(f"Attempted to deploy unauthorized file: {filename}")
                    return jsonify(error="Unauthorized file."), 403

                # Set the DISPLAY environment variable for graphical applications
                env = os.environ.copy()
                env['DISPLAY'] = ':0'

                # Construir el comando de despliegue dinámicamente
                deploy_command = f'/opt/4rji/bin/deploy /opt/4rji/labs/{filename}'

                # Ejecutar el comando directamente sin kitty
                subprocess.Popen(deploy_command, shell=True, env=env)

                logging.info(f"Deploy command for {filename} executed successfully.")
                return jsonify(message=f"Command for {filename} has been executed."), 200
            except Exception as e:
                logging.error(f"Error executing deploy command for {filename}: {e}")
                return jsonify(error=str(e)), 500
        elif cmd == 'reset_all_machines':
            try:
                # Set the DISPLAY environment variable for graphical applications
                env = os.environ.copy()
                env['DISPLAY'] = ':0'

                # Command to remove all Docker containers using absolute path
                docker_command = '/usr/bin/docker rm -f $(/usr/bin/docker ps -aq)'

                # Ejecutar el comando directamente sin kitty
                subprocess.Popen(docker_command, shell=True, env=env)

                logging.info("Reset all machines command executed successfully.")
                return jsonify(message="All Docker containers have been removed."), 200
            except Exception as e:
                logging.error(f"Error executing reset_all_machines command: {e}")
                return jsonify(error=str(e)), 500
        else:
            logging.warning(f"Unrecognized command: {cmd}")
            return jsonify(error="Unrecognized command."), 400
    # Renderizar el HTML con la lista de archivos
    return render_template_string(html, files=files)

if __name__ == '__main__':
    # Run the application on port 80
    app.run(host='0.0.0.0', port=80)