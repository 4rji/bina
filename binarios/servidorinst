#!/bin/bash

# Define la contraseña correcta
CORRECT_PASSWORD="ass"

# Solicita la contraseña al usuario (entrada oculta)
read -sp "Ingrese la contraseña para proceder: " INPUT_PASSWORD
echo

# Verifica si la contraseña es correcta
if [[ "$INPUT_PASSWORD" != "$CORRECT_PASSWORD" ]]; then
    echo -e "\e[1;31mContraseña incorrecta. Saliendo.\e[0m"
    exit 1
fi

echo -e "\e[1;32mContraseña correcta. Continuando con el script...\e[0m"

# Lista de paquetes a instalar
paquetes=( "docker.io" )

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get update
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            echo "Sistema operativo no soportado para la instalación automática de paquetes."
            ;;
    esac
done

# Verificar si el servicio de Docker está activo o inactivo
docker_service_status=$(systemctl is-active docker)

if [[ $docker_service_status == "active" ]]; then
    echo -e "\e[1;32mEl servicio de Docker está activo.\e[0m"
else
    echo -e "\e[1;31mEl servicio de Docker está inactivo. ¿Quieres activarlo? (s para activarlo, Enter para continuar.)\e[0m"
    read activate_docker

    if [[ $activate_docker == "s" ]]; then
        sudo systemctl start docker
        echo -e "\e[1;32mEl servicio de Docker ha sido activado.\e[0m"
    else
        echo -e "\e[1;31mNo se ha activado el servicio de Docker. Saliendo.\e[0m"
        exit 1
    fi
fi

# Solicita la clave adicional al usuario
read -p "Ingrese la clave para agregar al token: " additional_key

# Preguntar al usuario si desea iniciar el túnel en Docker
read -p "Do you want to start the tunnel in Docker? (Y/n): " response
response=${response:-Y}

if [[ "$response" =~ ^[Yy]$ ]]; then
    docker run cloudflare/cloudflared:latest tunnel --no-autoupdate run --token "eyJhIjoiY2FhNDc0NGQ1ZjZiN2YwNmY0OGIyMGM1NmNkYzA0MmUiLCJ0IjoiZDkyYmMwMmEtYTZiYi00YzY2LTg0MzYtMTlkNzdjNmNjOThiIiwicyI6Ik1tUXpObVk1TW1ZdFptTXdaUzAwTnpka0xXRTFNVEF0TkdRME9UY3dNbUpqWkRKa${additional_key}"
else
    echo "Tunnel start aborted."
fi
