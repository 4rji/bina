#!/usr/bin/env bash



# Uso: ./script.sh <IP_DEL_SERVIDOR>
if [ -z "$1" ]; then
  echo "Uso: $0 <IP_DEL_SERVIDOR>"
  exit 1
fi




# Lista de paquetes a instalar
paquetes=("iperf3")

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done


echo ""

echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"
# Dirección IP del servidor
SERVER_IP="10.0.4.178"

# Número de flujos paralelos
PARALLEL_STREAMS=5

# Colores ANSI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Función para mostrar instrucciones
function show_instructions {
    echo -e "${GREEN}=== Instrucciones para ejecutar iperf3 ===${NC}"
    echo ""
    echo -e "${YELLOW}1. En la máquina servidor (${SERVER_IP}), ejecuta:${NC}"
    echo -e "   ${BLUE}iperf3 -s${NC}"
    echo ""
    echo -e "${YELLOW}2. En la máquina cliente, ejecuta para medir la velocidad de envío:${NC}"
    echo -e "   ${BLUE}iperf3 -c ${SERVER_IP} -P ${PARALLEL_STREAMS}${NC}"
    echo -e "   ${RED}# -P ${PARALLEL_STREAMS}: Ejecuta la prueba con ${PARALLEL_STREAMS} flujos paralelos.${NC}"
    echo ""
    echo -e "${YELLOW}3. En la máquina cliente, ejecuta para medir la velocidad de recepción:${NC}"
    echo -e "   ${BLUE}iperf3 -c ${SERVER_IP} -P ${PARALLEL_STREAMS} -R${NC}"
    echo -e "   ${RED}# -R: Invierte la dirección de la prueba, midiendo la velocidad de recepción desde el servidor.${NC}"
    echo ""
    echo -e "${GREEN}=== Fin de las instrucciones ===${NC}"
}

# Mostrar las instrucciones
show_instructions



echo -e "\n\033[1;32m_________________________________________________________\033[0m\n"


# Mostrar el comando que debe ejecutarse en el servidor
echo -e "\n\033[1;37mComando a ejecutar en el servidor:\033[0m"
echo -e "\033[1;37miperf3 -s\033[0m\n"

echo -e "\n\033[1;32m_________________________________________________________\033[0m\n"



#!/usr/bin/env bash

# Preguntar al usuario si quiere iniciar el medidor
echo -e "\033[1;36m"
echo "  "
echo "  ¿Iniciar el medidor de velocidad? (Enter para continuar, 'n' para cancelar):  "
echo -e "\033[0m"
read -r respuesta
if [[ "$respuesta" == "n" ]]; then
  echo -e "\033[1;31m"
  echo "  Medidor cancelado."
  echo "  "
  echo -e "\033[0m"
  exit 0
fi

SERVER="$1"
separator="\n\033[1;37m\n  _________________________________________________________  \n\033[0m\n"

# Función para mostrar mensajes
echo_msg() {
    echo -e "\033[1;35m==============================================\033[0m"
    echo -e "$1"
    echo -e "\033[1;35m==============================================\033[0m"
}

# Función para extraer el bitrate del resumen final de iperf3
extract_bitrate() {
  local output="$1"
  local role="$2"
  local line
  line=$(echo "$output" | grep "$role" | tail -n 1)
  if [ "$role" == "sender" ]; then
    echo $(echo "$line" | awk '{print $(NF-3)" " $(NF-2)}')
  else
    echo $(echo "$line" | awk '{print $(NF-2)" " $(NF-1)}')
  fi
}

# Prueba de SUBIDA
echo_msg "\033[1;33m  Ejecutando prueba de SUBIDA en $SERVER...  \033[0m"
echo -e "$separator"
upload_output=$(iperf3 -c "$SERVER" 2>&1)
echo -e "\033[1;32m$upload_output\033[0m"
up_sender=$(extract_bitrate "$upload_output" "sender")
up_receiver=$(extract_bitrate "$upload_output" "receiver")
echo -e "$separator"

# Prueba de BAJADA
echo_msg "\033[1;33m  Ejecutando prueba de BAJADA en $SERVER (--reverse)...  \033[0m"
echo -e "\033[1;32m  Comando: iperf3 -c $SERVER --reverse  \033[0m"
echo -e "$separator"
download_output=$(iperf3 -c "$SERVER" --reverse 2>&1)
echo -e "\033[1;32m$download_output\033[0m"
down_sender=$(extract_bitrate "$download_output" "sender")
down_receiver=$(extract_bitrate "$download_output" "receiver")
echo -e "$separator"

# Resumen global (combinado)
echo_msg "\033[1;34m  Resumen global de las pruebas:  \033[0m"
echo -e "\033[1;36m"
echo "  Prueba de SUBIDA:"
echo "    Bitrate (sender):   $up_sender"
echo "    Bitrate (receiver): $up_receiver"
echo ""
echo "  Prueba de BAJADA:"
echo "    Bitrate (sender):   $down_sender"
echo "    Bitrate (receiver): $down_receiver"
echo -e "\033[0m"
echo -e "$separator"