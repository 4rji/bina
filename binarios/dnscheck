#!/usr/bin/env bash
# Infinite menu loop with single-key selection (no ENTER needed)

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'
BOLD='\033[1m'

# Detect OS
OS="$(uname)"
is_macos=false
is_linux=false
if [[ "$OS" == "Darwin" ]]; then
  is_macos=true
elif [[ "$OS" == "Linux" ]]; then
  is_linux=true
fi

while true; do
  echo -e "${RED}1)${NC} Run dnsleak test      ${CYAN}– Check DNS leaks using your dnsleak script in PATH${NC}"
  echo -e "${RED}2)${NC} Show default interface ${CYAN}– Display the default interface used for Internet${NC}"
  echo -e "${RED}3)${NC} List DNS servers       ${CYAN}– Show resolvers, interfaces, and active nameservers${NC}"
  echo -e "${RED}4)${NC} DNS capture (live)     ${CYAN}– Show all DNS traffic in real time${NC}"
  echo -e "${RED}5)${NC} DNS capture (pcap)     ${CYAN}– Save all DNS traffic to dns_capture.pcap${NC}"
  echo -e "${RED}6)${NC} QUAD9                  ${CYAN}– Run custom analysis with dnsquad${NC}"
  echo -e "${RED}7)${NC} Flush DNS              ${CYAN}– Clear local DNS cache on common OSes${NC}"
  echo -e "${RED}q)${NC} Quit                   ${CYAN}– Exit the script${NC}"
  echo
  echo -n "Select option [1-7,q]: "
  read -n1 -s opt
  echo && echo

  case "$opt" in
    1)
      echo -e "${GREEN}>> Running dnsleak test...${NC}"
      dnsleak
      ;;
    2)
      echo -e "${YELLOW}>> Getting default interface...${NC}"
      if $is_macos; then
        route get default | grep interface
      elif $is_linux; then
        ip route | grep '^default' | awk '{print "interface: "$5}'
      else
        echo "Unsupported OS for this action."
      fi
      ;;
    3)
      echo -e "${BLUE}>> Listing resolvers and DNS...${NC}"
      if $is_macos; then
        scutil --dns | grep -E 'resolver\ #[0-9]+|interface|nameserver'
      elif $is_linux; then
        echo "resolv.conf:" 
        grep -E 'nameserver|search|domain' /etc/resolv.conf
        echo
        if command -v systemd-resolve &>/dev/null; then
          echo "systemd-resolve status:"
          systemd-resolve --status | grep -E 'DNS Servers:|Link [0-9]+:'
        fi
      else
        echo "Unsupported OS for this action."
      fi
      ;;
    4)
      echo -e "${MAGENTA}>> Capturing live DNS (port 53)...${NC}"
      sudo tcpdump -n -i any port 53
      ;;
    5)
      echo -e "${CYAN}>> Recording DNS to dns_capture.pcap...${NC}"
      sudo tcpdump -n -i any port 53 -s 0 -w dns_capture.pcap
      echo -e "${CYAN}>> Done: open dns_capture.pcap with Wireshark${NC}"
      ;;
    6)
      echo -e "${GREEN}>> Running QUAD9 with /opt/4rji/bin/dnsquad...${NC}"
      /opt/4rji/bin/dnsquad
      ;;
    7)
      # Confirmation message in English and cross-OS handling
      echo -e "${BOLD}This will flush the DNS cache on Debian/Ubuntu, RedHat/CentOS/Fedora, Arch, and macOS.${NC}"
      echo -e "Press Enter to proceed, or type anything to cancel."
      read -r -p "> " confirm
      if [[ -z "$confirm" ]]; then
        if $is_macos; then
          echo -e "${GREEN}>> Flushing DNS cache on macOS...${NC}"
          # Common macOS commands (some may fail silently depending on version)
          sudo dscacheutil -flushcache 2>/dev/null || true
          sudo killall -HUP mDNSResponder 2>/dev/null || true
          sudo killall mDNSResponderHelper 2>/dev/null || true
          echo -e "${GREEN}>> DNS cache flush attempted on macOS.${NC}"
        elif $is_linux; then
          echo -e "${GREEN}>> Flushing DNS cache on Linux...${NC}"
          ran_any=false
          if command -v resolvectl >/dev/null 2>&1; then
            sudo resolvectl flush-caches && ran_any=true || true
          elif command -v systemd-resolve >/dev/null 2>&1; then
            sudo systemd-resolve --flush-caches && ran_any=true || true
          fi
          if command -v systemctl >/dev/null 2>&1; then
            if systemctl is-active --quiet nscd 2>/dev/null; then
              sudo systemctl restart nscd && ran_any=true || true
            fi
            if systemctl is-active --quiet dnsmasq 2>/dev/null; then
              sudo systemctl restart dnsmasq && ran_any=true || true
            fi
          fi
          if [[ "$ran_any" == false ]]; then
            echo -e "${YELLOW}>> No common DNS caching service detected. Nothing to flush.${NC}"
          else
            echo -e "${GREEN}>> DNS cache flush attempted on Linux.${NC}"
          fi
        else
          echo -e "${YELLOW}>> Unsupported OS for DNS flush.${NC}"
        fi
      else
        echo -e "${YELLOW}>> Cancelled.${NC}"
      fi
      ;;
    q | Q)
      echo -e "${RED}Exiting...${NC}"
      break
      ;;
    *)
      echo -e "${RED}Invalid option.${NC}"
      ;;
  esac

  echo
  echo -e "${BOLD}Press any key to return to the menu...${NC}"
  read -n1 -s
done
