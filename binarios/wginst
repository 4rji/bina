#!/usr/bin/env bash

# Lista de paquetes a instalar
paquetes=("wireguard" "resolvconf" )

paquete_instalado_apt() { dpkg -l "$1" | grep -q '^ii'; }
paquete_instalado_yum() { yum list installed "$1" &>/dev/null; }
paquete_instalado_dnf() { dnf list installed "$1" &>/dev/null; }
paquete_instalado_pacman(){ pacman -Qi "$1" &>/dev/null; }

# Detectar OS
if [ -f /etc/os-release ]; then
  . /etc/os-release
  OS=$ID
fi

# Instalar paquetes
for paquete in "${paquetes[@]}"; do
  case $OS in
    debian|ubuntu|kali)
      if ! paquete_instalado_apt "$paquete"; then sudo apt-get install -y "$paquete"; fi;;
    centos|rhel)
      if ! paquete_instalado_yum "$paquete"; then sudo yum install -y "$paquete"; fi;;
    fedora)
      if ! paquete_instalado_dnf "$paquete"; then sudo dnf install -y "$paquete"; fi;;
    arch)
      if ! paquete_instalado_pacman "$paquete"; then sudo pacman -S --noconfirm "$paquete"; fi;;
    *) :;;
  esac
done

# Setup WireGuard si se pasó un .conf
setup_wireguard() {
  echo -e "\033[0;34mCopying config to /etc/wireguard/\033[0m"
  sudo cp "$config_file" "/etc/wireguard/$file_name"
  sudo chmod 600 "/etc/wireguard/$file_name"
  echo -e "\033[0;35mBringing up...\033[0m"
  sudo wg-quick up "$interface_name"
  echo -e "\033[0;36mStatus:\033[0m"
  sudo wg
  echo "Connecting."
  sleep .5
  echo "Connecting.."
  sleep 1
  echo -e "\033[0;31mPublic IP:\033[0m"
  curl -s ifconfig.me; echo
}

# Args
if [ "$1" == "-c" ]; then
  crontab_mode=true
elif [ -z "$1" ]; then
  echo -e "\033[0;31mError: No configuration file provided or -c flag not used."
  echo -e "Usage: $0 [-c | path/to/file.conf]\033[0m"
  exit 1
else
  config_file=$1
  file_name=$(basename "$config_file")
  interface_name="${file_name%.*}"
  setup_wireguard
fi

# Inferir interfaz si no viene de .conf
interface_name="${interface_name:-bb8}"

echo -e "\n\033[1;33m_________________________________________________________\033[0m\n"

# check_wg.sh (asegura enlace cada minuto)
echo -e "\033[0;32mCreating /usr/local/bin/check_wg.sh...\033[0m"
sudo tee /usr/local/bin/check_wg.sh >/dev/null <<EOF
#!/bin/bash
INTERFACE="${interface_name}"
if ! wg show "\$INTERFACE" >/dev/null 2>&1; then
  sudo wg-quick up "\$INTERFACE"
fi
EOF
sudo chmod +x /usr/local/bin/check_wg.sh

# bb8reconnect.sh (reconecta forzado cada 30 min)
echo -e "\033[0;32mCreating /usr/local/bin/bb8reconnect.sh...\033[0m"
sudo tee /usr/local/bin/bb8reconnect.sh >/dev/null <<EOF
#!/bin/bash
IF="${interface_name}"
sudo wg-quick down "\$IF" 2>/dev/null || true
sudo wg-quick up "\$IF"
EOF
sudo chmod +x /usr/local/bin/bb8reconnect.sh

# Cron root: cada minuto check_wg, cada 30 min reconnect
echo -e "\033[0;32mUpdating root crontab...\033[0m"
( sudo crontab -l 2>/dev/null | grep -v '/usr/local/bin/check_wg.sh' | grep -v '/usr/local/bin/bb8reconnect.sh'; \
  echo "* * * * * /usr/local/bin/check_wg.sh"; \
  echo "*/30 * * * * /usr/local/bin/bb8reconnect.sh" ) | sudo crontab -


# === FAILOVER dominio↔IP (lectura dinámica del .conf) ===
echo -e "\033[0;32mCreating /usr/local/bin/wg_failover.sh...\033[0m"
sudo tee /usr/local/bin/wg_failover.sh >/dev/null <<'EOF'
#!/usr/bin/env bash
set -e
IFACE="${interface_name:-wg0}"
CONF="/etc/wireguard/${IFACE}.conf"

# Si no existe, intenta usar el .conf pasado al script principal
[ -f "$CONF" ] || { [ -n "$config_file" ] && CONF="$config_file"; }

# Extrae del .conf el PublicKey del servidor y el Endpoint (dominio:puerto)
PUBKEY=$(awk -F= '/^\s*\[Peer]/{p=1;next} p && /^\s*PublicKey/{gsub(/[[:space:]]/,"",$2);print $2;exit}' "$CONF")
EP=$(awk -F= '/^\s*\[Peer]/{p=1;next} p && /^\s*Endpoint/{gsub(/[[:space:]]/,"",$2);print $2;exit}' "$CONF")

DOM=${EP%:*}
PORT=${EP##*:}

IP="${WG_FAILOVER_IP:-23.53.181.11}"         # <-- AJUSTA la IP fallback
DOMAIN_EP="$DOM:$PORT"
IP_EP="$IP:$PORT"

ok(){ ping -c1 -W1 "$1" >/dev/null 2>&1; }
cur(){ wg show "$IFACE" endpoints | awk -v k="$PUBKEY" '$1==k{print $2}'; }
setep(){ wg set "$IFACE" peer "$PUBKEY" endpoint "$1"; }

# Asegura interfaz arriba
wg show "$IFACE" >/dev/null 2>&1 || wg-quick up "$IFACE" >/dev/null 2>&1

# Preferir dominio; si falla, usar IP
if ok "$DOM"; then
  [ "$(cur)" != "$DOMAIN_EP" ] && setep "$DOMAIN_EP"
elif ok "$IP"; then
  [ "$(cur)" != "$IP_EP" ] && setep "$IP_EP"
fi
EOF
sudo chmod +x /usr/local/bin/wg_failover.sh

# === Cron cada 15 min (idempotente) ===
echo -e "\033[0;32mAdding cron every 15 minutes for wg_failover.sh...\033[0m"
( sudo crontab -l 2>/dev/null | grep -v '/usr/local/bin/wg_failover.sh'; \
  echo "*/15 * * * * WG_FAILOVER_IP=23.53.181.11 /usr/local/bin/wg_failover.sh" ) | sudo crontab -

  
echo -e "\n\033[1;33m_________________________________________________________\033[0m\n"

echo -e "\n\033[1;34mWG FAILOVER — Instrucciones rápidas\033[0m"

echo -e "\033[1;33m1) Cambiar la IP fallback\033[0m"
echo -e "   sudo crontab -e"
echo -e "   # Edita la línea del cron (cada 15 min):"
echo -e "   */15 * * * * WG_FAILOVER_IP=23.53.181.11 /usr/local/bin/wg_failover.sh"
echo -e "   # Reemplaza 23.53.181.11 por tu IP.\n"
echo -e "   # Test inmediato (sin esperar cron):"
echo -e "   sudo WG_FAILOVER_IP=<NUEVA_IP> /usr/local/bin/wg_failover.sh\n"

echo -e "\033[1;33m2) Cambiar la interfaz WireGuard\033[0m"
echo -e "   sudo nano /usr/local/bin/wg_failover.sh"
echo -e "   # Edita la línea: IFACE=\"wg0\"   # pon tu interfaz real\n"

echo -e "\033[1;33m3) Cambiar la ruta del script\033[0m"
echo -e "   sudo mv /usr/local/bin/wg_failover.sh /opt/wg_failover.sh"
echo -e "   sudo crontab -e"
echo -e "   # Actualiza la ruta en la línea del cron:"
echo -e "   */15 * * * * WG_FAILOVER_IP=<IP> /opt/wg_failover.sh\n"

echo -e "\033[1;33m4) Config del cliente\033[0m"
echo -e "   /etc/wireguard/<IFACE>.conf  (Endpoint debe quedar con el DOMINIO: vipiji.com:51822)\n"

sudo crontab -l
echo

