#!/usr/bin/env bash

# Salir si ocurre un error
set -e

# Función para mostrar mensajes
echo_msg() {
    echo "=============================================="
    echo "$1"
    echo "=============================================="
}



# Lista de paquetes a instalar
paquetes=("bind9utils" "bind9-doc" "dnsutils" "bind9")

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done

echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"


# 4. Solicitar al usuario la dirección IP y el nombre de dominio
echo_msg "Configuración del Servidor DNS"

echo ""
#mostar ip
ip -4 addr show | awk '/inet/ && !/127\.0\.0\.1/ {split($2, a, "/"); printf "\033[1;34m%s\033[0m: \033[1;32m%s\033[0m\n", $NF, a[1]}'

read -p "Ingresa la dirección IP de esta maquina: " SERVER_IP
read -p "Ingresa el nombre de dominio (ejemplo: ccdc.com): " DOMAIN_NAME

if [[ ! $SERVER_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "La dirección IP ingresada no es válida."
    exit 1
fi

IFS='.' read -r -a IP_ARRAY <<< "$SERVER_IP"
REVERSE_ZONE="${IP_ARRAY[2]}.${IP_ARRAY[1]}.${IP_ARRAY[0]}.in-addr.arpa"
REVERSE_SUBNET="${IP_ARRAY[0]}.${IP_ARRAY[1]}.${IP_ARRAY[2]}"

echo ""
echo ""

# 5. Configurar BIND9
echo_msg "Configurando BIND9..."

# 5.1. Configurar /etc/bind/named.conf.options
echo "Configurando /etc/bind/named.conf.options..."
sudo tee /etc/bind/named.conf.options > /dev/null <<EOL
options {
    directory "/var/cache/bind";
    recursion yes;
    allow-query { any; };
    forwarders {
        8.8.8.8;
        8.8.4.4;
    };
    dnssec-validation auto;
    auth-nxdomain no;    # Conforma a RFC1035
    listen-on { any; };
    listen-on-v6 { any; };
};
EOL



echo ""
echo "Configurando /etc/bind/named.conf.local..."
sudo tee /etc/bind/named.conf.local > /dev/null <<EOL
//
// Do any local configuration here
//

zone "${DOMAIN_NAME}" {
    type master;
    file "/etc/bind/zones/db.${DOMAIN_NAME}";
};

zone "${REVERSE_ZONE}" {
    type master;
    file "/etc/bind/zones/db.${REVERSE_SUBNET}";
};
EOL

# 6. Crear directorio de zonas si no existe
sudo mkdir -p /etc/bind/zones




# 7. Configurar la zona directa
echo "Creando archivo de zona directa para ${DOMAIN_NAME}..."
sudo tee /etc/bind/zones/db.${DOMAIN_NAME} > /dev/null <<EOL
; Archivo de zona directa para ${DOMAIN_NAME}
; Establece el TTL (Time To Live)
\$TTL    604800

; Define la zona SOA (Start of Authority)
@       IN      SOA     ns1.${DOMAIN_NAME}. admin.${DOMAIN_NAME}. (
                                $(date +%Y%m%d%H)  ; Número de serie
                                604800             ; Refresh
                                86400              ; Retry
                                2419200            ; Expire
                                604800 )           ; Neg. Cache TTL
;

; Registros NS (Name Server)
@       IN      NS      ns1.${DOMAIN_NAME}.
@       IN      NS      ns2.${DOMAIN_NAME}.

; Definición de direcciones IP para los servidores
ns1     IN      A       ${SERVER_IP}
ns2     IN      A       ${SERVER_IP}

; Definición de IP para el dominio y www
@       IN      A       ${SERVER_IP}
www     IN      A       ${SERVER_IP}
EOL

# 8. Configurar la zona reversa
echo "Creando archivo de zona reversa para ${REVERSE_ZONE}..."
sudo tee /etc/bind/zones/db.${REVERSE_SUBNET} > /dev/null <<EOL
; Archivo de zona reversa para ${REVERSE_ZONE}
; Establece el TTL (Time To Live)
\$TTL    604800

; Define la zona SOA (Start of Authority)
@       IN      SOA     ns1.${DOMAIN_NAME}. admin.${DOMAIN_NAME}. (
                                $(date +%Y%m%d%H)  ; Número de serie
                                604800             ; Refresh
                                86400              ; Retry
                                2419200            ; Expire
                                604800 )           ; Neg. Cache TTL
;

; Registros NS (Name Server)
@       IN      NS      ns1.${DOMAIN_NAME}.

; Asocia la IP ${IP_ARRAY[3]} con el nombre de dominio
${IP_ARRAY[3]}      IN      PTR     ${DOMAIN_NAME}.
EOL




# 9. Verificar archivos de configuración
echo_msg "Verificando archivos de configuración..."
named-checkconf
named-checkzone "${DOMAIN_NAME}" "/etc/bind/zones/db.${DOMAIN_NAME}"
named-checkzone "${REVERSE_ZONE}" "/etc/bind/zones/db.${REVERSE_SUBNET}"

echo_msg "Configuración completada."
echo "Puedes verificar el funcionamiento del servidor DNS con:"
echo "  dig @localhost ${DOMAIN_NAME}"
echo "  dig @localhost -x ${SERVER_IP}"
echo ""
echo "¡El servidor DNS debería estar funcionando correctamente!"

echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"

# 10. Configurar el firewall
echo_msg "Configurando el firewall..."
if command -v ufw >/dev/null 2>&1; then
    echo "UFW está instalado. Configurando reglas..."
    sudo ufw allow 53/tcp
    sudo ufw allow 53/udp
    echo "Reglas del firewall actualizadas."
else
    echo "UFW no está instalado. Instalándolo..."
    sudo apt install ufw -y
    sudo ufw allow 53/tcp
    sudo ufw allow 53/udp
    sudo ufw enable
    echo "UFW instalado y configurado."
fi

# 11. Reiniciar y habilitar el servicio BIND9
echo_msg "Reiniciando y habilitando el servicio BIND9..."
sudo systemctl restart bind9
sudo systemctl enable named.service

echo "sudo systemctl status bind9"

# 12. Mostrar estado del servicio
echo_msg "Estado del servicio BIND9:"
sudo systemctl status bind9 --no-pager

echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"

echo_msg "Archivos de configuracion"
echo "ls /etc/bind"
ls /etc/bind
echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"




# DNS
echo ""

# Verificar si se pasó el argumento -a
if [[ "$1" == "-a" ]]; then
    # Ejecutar el comando systemd-resolve --status
    systemd-resolve --status
fi

# Verificar si el archivo /etc/resolv.conf existe
if [ -f /etc/resolv.conf ]; then
    echo -e "\033[1;33mConfigured DNS servers:\033[0m"
    
    # Extraer y mostrar las líneas no comentadas que contienen "nameserver"
    grep -v '^\s*#' /etc/resolv.conf | grep "nameserver" | awk '{print "\033[1;31m" $2 "\033[0m"}'
else
    echo -e "\033[1;33mThe /etc/resolv.conf file does not exist.\033[0m"
fi
echo ""
echo "ejecutar con -a para ver"
echo "systemd-resolve --status"
echo ""

echo -e "\n\033[1;35m_________________________________________________________\033[0m\n"
echo_msg "Mostrando puerto abierto: netstat -tulpn | grep udp"
netstat -tulpn | grep 53

echo -e "\n\033[1;34m_________________________________________________________\033[0m\n"

exit 0