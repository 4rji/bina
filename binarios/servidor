#!/bin/bash

# Función para mostrar el mensaje de ayuda y preguntar si desea continuar
show_help_and_confirm() {
    echo ""
    echo -e "\033[1;32m Si no funciona (secreto, linpi) el problema son dependencias de python:\033[0m"
    echo ""
    echo -e "\033[1;33mPara instalar pip requirements: pyreque\033[0m"
    echo ""
    echo ""
    echo -e "\033[1;34m_________________________________________________________\033[0m"
    exit
}

# Verificar si se pasó el argumento -h
if [ "$1" == "-h" ]; then
    show_help_and_confirm
fi
echo ""

# Lista de paquetes a instalar
paquetes=("python3" "python3-pip")

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {  
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done

# Script que indica el comando ejecutado
echo -e "\033[1;32mEl comando que este script ejecuta es:\033[0m"
echo ""
echo -e "\033[1;33mpython3 -m http.server 80\033[0m"
echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"
echo -e "\033[0;34mEjecutar linpi para descomprimir los otros binarios y también pyreque como sudo para secreto\033[0m"
echo -e "\n\033[1;37m_________________________________________________________\033[0m\n"

# Variables para opciones predeterminadas
default_port="80"
port=$default_port

# Directorio de destino para los archivos Apache
destination_dir="/opt/4rji/bin"

echo ""
# Pregunta combinada
read -p "¿Deseas utilizar un puerto diferente al predeterminado ($default_port)? [S/n] " custom_port
custom_port="${custom_port:-n}"

if [[ $custom_port =~ ^[Ss]$ ]]; then
    # Solicitar el puerto personalizado
    read -p "Por favor, introduce el puerto deseado: " port
fi

# Crear el directorio de destino si no existe
if [ ! -d "$destination_dir" ]; then
    mkdir -p "$destination_dir"
fi

echo ""
echo ""
echo -e "\033[0;34mArchivos copiados a $destination_dir\033[0m"
ls $destination_dir
echo ""

# Función para detener el servidor HTTP al recibir Ctrl+C
cleanup() {
    echo -e "\n\033[1;31mDeteniendo el servidor HTTP...\033[0m"
    kill $SERVER_PID
    exit
}

# Atrapar la señal SIGINT (Ctrl+C)
trap cleanup SIGINT

# Iniciar el servidor HTTP de Python en /opt/4rji/bin
if [[ $port =~ ^[0-9]+$ ]]; then
    cd "$destination_dir"
    echo -e "\033[1;34m_________________________________________________________\033[0m"
    echo ""
    echo -e "\033[33mIniciando servidor HTTP de Python en la ruta $destination_dir:$port\033[0m"
    ip -4 addr show | awk '/inet/ && !/127.0.0.1/ {split($2, a, "/"); printf "\033[1;31m\t\t\t\t%s: %s\n\033[0m", $NF, a[1]}'
    echo ""

    # Empezar el servidor HTTP en el puerto seleccionado en segundo plano
    python3 -m http.server $port &

    # Guardar el PID del proceso para poder detenerlo después
    SERVER_PID=$!

    # Función para buscar archivos en el directorio mientras el servidor está corriendo
    search_files() {
        while true; do
            read -p "Introduce un prefijo de archivo para buscar (o 'exit' para salir): " search_prefix
            if [ "$search_prefix" == "exit" ]; then
                break
            fi
            echo -e "\033[1;34mArchivos encontrados que empiezan con '$search_prefix':\033[0m"
            # Buscar archivos y mostrar los nombres en amarillo
            find "$destination_dir" -type f -name "$search_prefix*" -exec basename {} \; | while read line; do
                echo -e "\033[1;33m$line\033[0m"
            done
        done
    }

    # Ejecutar la función de búsqueda mientras el servidor corre
    search_files

    # Detener el servidor HTTP después de salir del loop de búsqueda
    echo -e "\033[1;31mDeteniendo el servidor HTTP...\033[0m"
    kill $SERVER_PID

else
    echo -e "\033[1;31mEl puerto ingresado no es válido.\033[0m"
fi
