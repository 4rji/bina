#!/usr/bin/env bash
set -euo pipefail

echo_msg() {
  echo ""
  echo "=============================================="
  echo "$1"
  echo "=============================================="
  echo ""
}

usage() {
  cat <<'EOF'

Uso: shadows [opción] [argumentos]

Opciones:
  -s              Instala y prepara el servidor Shadowsocks (Debian/Ubuntu).
  -c [ips|file]   Genera configuraciones de cliente para Linux.
  -m [ips|file]   Genera configuraciones de cliente para macOS.
  -r              Ejecuta un cliente usando una configuración guardada.
  -i              Instala el servicio systemd ss-server.
  -r              Ejecuta otro script para redirigir todo el trafico CLI

Tips: Puedes pasar IPs separadas por espacios/comas o un archivo con una IP por línea.
      También puedes usar el archivo: /opt/4rji/bin/shadowips

EOF
  exit 1
}

ensure_dir() {
  SSHA_DIR="$HOME/.ssha"
  mkdir -p "$SSHA_DIR"
  chmod 700 "$SSHA_DIR"
}

sanitize_ip() {
  local ip="$1"
  echo "${ip//./-}"
}

write_client_config() {
  local ip="$1"
  local flavor="$2"   # linux|macos
  local ip_sanitized
  ip_sanitized="$(sanitize_ip "$ip")"
  local cfg_name=".$flavor-${ip_sanitized}.json"
  local cfg_path="$SSHA_DIR/$cfg_name"

  cat > "$cfg_path" <<EOF
{
  "server": "$ip",
  "server_port": 8388,
  "local_address": "127.0.0.1",
  "local_port": 1080,
  "password": "nalanga12",
  "method": "aes-256-gcm"
}
EOF
  chmod 600 "$cfg_path"

  echo -e "\033[32mCreated config:\033[0m"
  echo "$cfg_path"
  echo ""

  echo -e "\033[36mRun in foreground:\033[0m"
  echo "ss-local -c \"$cfg_path\" -v"
  echo ""

  echo -e "\033[35mRun in background:\033[0m"
  echo "ss-local -c \"$cfg_path\" -v &"
  echo ""

  echo -e "\033[33mQuick test:\033[0m"
  echo "curl --socks5 127.0.0.1:1080 https://ifconfig.me"
  echo ""
}

collect_ips_interactive() {
  IP_LIST=()
  while true; do
    read -p $'\033[33mServer IP:\033[0m ' ip
    ip="$(echo -n "$ip" | tr -d '[:space:]')"
    [ -z "$ip" ] && continue
    IP_LIST+=("$ip")
    read -p $'\033[36mAdd another server? [Y/n]:\033[0m ' more
    more_lc="$(echo "${more:-}" | tr '[:upper:]' '[:lower:]')"
    case "$more_lc" in
      n|no) echo ""; break ;;
      *) echo "" ;;
    esac
  done
}

parse_ips_input() {
  IP_LIST=()
  if [ $# -gt 0 ]; then
    if [ $# -eq 1 ] && [ -r "$1" ]; then
      while IFS= read -r line || [ -n "$line" ]; do
        tok="$(echo "$line" | sed 's/#.*//' | tr -d ' \t\r')"
        [ -n "$tok" ] && IP_LIST+=("$tok")
      done < "$1"
    else
      local raw="$*"
      raw="${raw//,/ }"
      for token in $raw; do
        [ -n "$token" ] && IP_LIST+=("$token")
      done
    fi
  else
    collect_ips_interactive
  fi
  if [ ${#IP_LIST[@]} -eq 0 ]; then
    echo -e "\033[31mNo IPs provided.\033[0m"
    exit 1
  fi
}

run_from_saved() {
  ensure_dir
  echo_msg "RUN A SAVED CONFIG"

  configs=()
  if [ "$(uname -s)" = "Darwin" ]; then
    while IFS= read -r f; do
      [ -n "$f" ] && configs+=("$f")
    done <<EOF
$(find "$SSHA_DIR" -maxdepth 1 -type f -name "*.json" | sort)
EOF
  else
    if command -v mapfile >/dev/null 2>&1; then
      mapfile -t configs < <(find "$SSHA_DIR" -maxdepth 1 -type f -name "*.json" | sort)
    else
      while IFS= read -r f; do
        [ -n "$f" ] && configs+=("$f")
      done <<EOF
$(find "$SSHA_DIR" -maxdepth 1 -type f -name "*.json" | sort)
EOF
    fi
  fi

  if [ ${#configs[@]} -eq 0 ]; then
    echo -e "\033[31mNo configs found in $SSHA_DIR.\033[0m"
    exit 1
  fi

  echo -e "\033[36mAvailable configs:\033[0m"
  for i in "${!configs[@]}"; do
    base="$(basename "${configs[$i]}")"
    echo "[$((i+1))] $base"
  done
  echo ""

  read -p $'\033[33mSelect a number:\033[0m ' sel
  if ! [[ "$sel" =~ ^[0-9]+$ ]] || [ "$sel" -lt 1 ] || [ "$sel" -gt "${#configs[@]}" ]; then
    echo -e "\033[31mInvalid selection.\033[0m"
    exit 1
  fi
  cfg_path="${configs[$((sel-1))]}"

  echo_msg "VERIFY CONNECTIVITY (before running)"
  echo -e "\033[33mIn another terminal, once started, you can verify with:\033[0m"
  echo "curl --socks5 127.0.0.1:1080 https://ifconfig.me"
  echo ""

  echo -e "\033[36mStarting client in foreground:\033[0m"
  echo "ss-local -c \"$cfg_path\" -v"
  echo ""
  exec ss-local -c "$cfg_path" -v
}

# --- Parse options ---
[ $# -eq 0 ] && usage

MODE=""
while getopts ":scmrih" opt; do
  case "$opt" in
    s) MODE="s" ;;
    c) MODE="c" ;;
    m) MODE="m" ;;
    r) MODE="r" ;;
    i) MODE="i" ;;
    h) usage ;;
    *) usage ;;
  esac
done
shift $((OPTIND-1))
ARGS=("$@")

case "$MODE" in
  s)
    echo_msg "SERVER INSTALL (Debian/Ubuntu)"
    
    if ! dpkg -s shadowsocks-libev >/dev/null 2>&1; then
      sudo apt install -y shadowsocks-libev
    else
      echo -e "\033[33mshadowsocks-libev already installed, skipping apt install.\033[0m"
    fi
    sudo tee /etc/shadowsocks-libev/config.json >/dev/null <<'EOF'
{
  "server": "0.0.0.0",
  "server_port": 8388,
  "password": "nalanga12",
  "method": "aes-256-gcm",
  "timeout": 300,
  "fast_open": true
}
EOF
    sudo systemctl enable shadowsocks-libev
    sudo systemctl restart shadowsocks-libev
    echo ""
    ss -tulpn | grep 8388
    echo ""
    echo -e "\033[32mSERVER READY ON PORT 8388\033[0m"
    echo ""
    echo -e "\033[36mTo start server manually:\033[0m"
    echo "ss-server -c /etc/shadowsocks-libev/config.json -v"
    echo ""
    echo "pidof ss-server and kill -9"
    ;;

  c)
    ensure_dir
    echo_msg "CLIENT CONFIGURATION (Linux)"
    sudo apt install -y shadowsocks-libev
    parse_ips_input "${ARGS[@]}"
    for ip in "${IP_LIST[@]}"; do
      write_client_config "$ip" "linux"
    done
    ;;

  m)
    ensure_dir
    echo_msg "CLIENT CONFIGURATION (macOS)"
    if ! command -v brew >/dev/null 2>&1; then
      echo -e "\033[31mHomebrew not found. Install Homebrew first.\033[0m"
      exit 1
    fi
    brew list shadowsocks-libev >/dev/null 2>&1 || brew install shadowsocks-libev
    parse_ips_input "${ARGS[@]}"
    for ip in "${IP_LIST[@]}"; do
      write_client_config "$ip" "macos"
    done
    ;;

  r)
    run_from_saved
    ;;

  i)
    echo_msg "INSTALL SYSTEMD SERVICE (ss-server)"
    sudo tee /etc/systemd/system/ss-server.service >/dev/null <<'EOF'
[Unit]
Description=Shadowsocks-libev Server
After=network-online.target
Wants=network-online.target

[Service]
ExecStart=/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json -v
Restart=always
RestartSec=2
LimitNOFILE=51200

[Install]
WantedBy=multi-user.target
EOF
    sudo systemctl daemon-reload
    sudo systemctl enable ss-server.service
    sudo systemctl restart ss-server.service
    sudo systemctl status ss-server.service --no-pager
    echo ""
    echo -e "\033[32mSystemd service ss-server.service installed and active.\033[0m"
    echo -e "\033[36mManage with:\033[0m sudo systemctl [status|restart|stop] ss-server.service"
    ;;

  *)
    usage
    ;;
esac
